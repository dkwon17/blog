<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://che.eclipseprojects.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://che.eclipseprojects.io/" rel="alternate" type="text/html" /><updated>2021-12-15T16:53:03+00:00</updated><id>https://che.eclipseprojects.io/feed.xml</id><title type="html">Eclipse Che Blog</title><subtitle>Eclipse Che runs IDEs in Kubernetes.</subtitle><entry><title type="html">Test pull requests with the Try in Web IDE GitHub action</title><link href="https://che.eclipseprojects.io/2021/10/18/@david.kwon-test-pull-requests-with-the-try-in-web-ide-github-action.html" rel="alternate" type="text/html" title="Test pull requests with the Try in Web IDE GitHub action" /><published>2021-10-18T00:00:00+00:00</published><updated>2021-10-18T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2021/10/18/@david.kwon/test-pull-requests-with-the-try-in-web-ide-github-action</id><content type="html" xml:base="https://che.eclipseprojects.io/2021/10/18/@david.kwon-test-pull-requests-with-the-try-in-web-ide-github-action.html">&lt;p&gt;&lt;em&gt;Cross posted from the &lt;a href=&quot;https://developers.redhat.com/articles/2021/10/07/test-pull-requests-try-web-ide-github-action#integrate_the_try_in_web_ide_action_with_your_github_repository&quot;&gt;Red Hat Developer blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Web-based, cloud-hosted integrated development environments (IDEs) can make development and collaboration more efficient if they are well integrated with version control. This blog post shows you how to use the &lt;a href=&quot;https://github.com/marketplace/actions/try-in-web-ide&quot;&gt;Try in Web IDE GitHub action&lt;/a&gt; to make it easier for collaborators to test pull requests on &lt;a href=&quot;https://www.eclipse.org/che/docs/che-7/hosted-che/hosted-che/&quot;&gt;Eclipse Che hosted by Red Hat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: The instance of Eclipse Che used by the Try in Web IDE GitHub action can be configured. The default instance is &lt;a href=&quot;https://workspaces.openshift.com&quot;&gt;workspaces.openshift.com&lt;/a&gt; (Eclipse Che hosted by Red Hat).&lt;/p&gt;

&lt;h2 id=&quot;the-try-in-web-ide-github-action&quot;&gt;The Try in Web IDE GitHub action&lt;/h2&gt;
&lt;p&gt;The Try in Web IDE GitHub action makes it easy to try a pull request in your browser-based developer environment. The GitHub action listens to pull request events and provides a comment or status check with a link. When you click the link, it opens the branch in a new web IDE workspace.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/eclipse/che-docs&quot;&gt;Eclipse Che documentation&lt;/a&gt; repository has recently integrated this GitHub action into its workflow. You can view a recent pull request to try it yourself. Figure 1 shows a pull request comment created by the GitHub action. Clicking the badge opens a new workspace to try the pull request in the web browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/test-pull-requests-with-the-try-in-web-ide-github-action/comment.png&quot; alt=&quot;GitHub PR comment with badge to open PR branch in new workspace&quot; /&gt;
&lt;span style=&quot;color:grey&quot;&gt;&lt;em&gt;Figure 1: Clicking the badge opens a web IDE workspace for testing the pull request.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Figure 2 shows a status check done by the GitHub action. Clicking the Details link opens a new workspace to try the pull request in the web browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/test-pull-requests-with-the-try-in-web-ide-github-action/status-check.png&quot; alt=&quot;GitHub PR status check with link to open PR branch in new workspace&quot; /&gt;
&lt;span style=&quot;color:grey&quot;&gt;&lt;em&gt;Figure 2: Clicking the Details link opens a web IDE workspace for testing the pull request.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Figure 3 shows the workspace created in Eclipse Che hosted by Red Hat. This is the web IDE workspace that opens in the web browser when you click either the badge from Figure 1 or the link from Figure 2. From here, you can try the pull request and test its correctness.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/test-pull-requests-with-the-try-in-web-ide-github-action/crw.png&quot; alt=&quot;PR branch opened in a new workspace&quot; /&gt;
&lt;span style=&quot;color:grey&quot;&gt;&lt;em&gt;Figure 3: Try the pull request and test its correctness.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;integrate-the-try-in-web-ide-action-with-your-github-repository&quot;&gt;Integrate the Try in Web IDE action with your GitHub repository&lt;/h2&gt;
&lt;p&gt;This section shows you how to add the Try in Web IDE GitHub action to your GitHub repository’s workflow. We will configure the action to automatically create a comment (Figure 1) and status check (Figure 2) on new pull requests.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites-and-setup&quot;&gt;Prerequisites and setup&lt;/h3&gt;
&lt;p&gt;You will need a Red Hat account to use Eclipse Che hosted by Red Hat. Navigate to &lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot;&gt;Developer Sandbox for Red Hat OpenShift&lt;/a&gt;, register for a free account, and launch your Developer Sandbox environment. Note that you must verify your identity with a phone number.&lt;/p&gt;

&lt;p&gt;You also need an account on GitHub and a repository where you can integrate GitHub actions.&lt;/p&gt;

&lt;p&gt;Finally, although not mandatory, you can add a &lt;a href=&quot;https://www.eclipse.org/che/docs/che-7/end-user-guide/authoring-devfiles-version-1/&quot;&gt;devfile&lt;/a&gt; in the root of your GitHub repository to specify the features of the development environment and IDE. We’ll use the devfile very shortly.&lt;/p&gt;

&lt;h3 id=&quot;step-1-create-the-github-workflow-file&quot;&gt;Step 1: Create the GitHub workflow file&lt;/h3&gt;
&lt;p&gt;In your GitHub repository, create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; directory if it does not exist already. Then, create a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.yml&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Try in Web IDE example&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request_target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Triggers workflow on pull request open&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;opened&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;add-link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-20.04&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Web IDE Pull Request Check&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;try-in-web-ide&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redhat-actions/try-in-web-ide@v1&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# GitHub action inputs&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;# required&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;github_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;# optional - defaults to true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;add_comment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;# optional - defaults to true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;add_status&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file defines a workflow named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Try in Web IDE example&lt;/code&gt;, with a job that runs the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v1&lt;/code&gt; version of the Try in Web IDE GitHub action. The workflow is triggered on the &lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pull_request_target&lt;/code&gt;&lt;/a&gt; event on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opened&lt;/code&gt; activity type.&lt;/p&gt;

&lt;h3 id=&quot;step-2-configure-the-github-workflow-file&quot;&gt;Step 2: Configure the GitHub workflow file&lt;/h3&gt;
&lt;p&gt;You can further configure the workflow defined in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.yml&lt;/code&gt; to fit your needs. Consider adding more activity types within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;on.pull_request_target.types&lt;/code&gt; field. Alongside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opened&lt;/code&gt; event, other events that you might find useful are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reopened&lt;/code&gt; (which is triggered when the pull request is reopened) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;synchronize&lt;/code&gt; (which is triggered when the pull request’s tracking branch synchronizes with its source branch). The new types are added in the following code snippet:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pull_request_target&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Add multiple activity types&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;opened&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;reopened&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;synchronize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_comment&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_status&lt;/code&gt; GitHub action inputs can also be configured to customize whether the comment or status check is created in the pull request. For example, the following code snippet disables pull request comments:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &lt;span class=&quot;s&quot;&gt;...&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;github_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;add_comment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;add_status&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The full table of inputs is available in the Try in Web IDE GitHub action &lt;a href=&quot;https://github.com/marketplace/actions/try-in-web-ide#action-inputs&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;step-3-optional-create-a-devfile&quot;&gt;Step 3 (optional): Create a devfile&lt;/h3&gt;
&lt;p&gt;To define the development environment of the web IDE workspace, creating a devfile in the root of the repository is highly recommended. Configuring a devfile ensures that the workspace contains everything you need to effectively try and test the pull request, such as plug-ins, development commands, Kubernetes objects, and other aspects of the environment setup.&lt;/p&gt;

&lt;p&gt;For example, specifying the Red Hat Java plug-in in the devfile provides features that Java developers use (for things like debugging, code completion, and so on) within the web IDE workspace.&lt;/p&gt;

&lt;p&gt;Here is an example of a minimal devfile.yml file for a Java project:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.0.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project-dev-environment&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project-name-here&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GITHUB&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;REPOSITORY&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HERE'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chePlugin&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redhat/java/latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This devfile defines the project name and source location, as well as the Java plug-in. Many more &lt;a href=&quot;https://www.eclipse.org/che/docs/che-7/end-user-guide/authoring-devfiles-version-1/#adding-components-to-a-devfile_che&quot;&gt;components&lt;/a&gt; can be added in a devfile to fine-tune the development environment for your specific project.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After you have completed the steps in this blog post, creating a new pull request will trigger the Try in Web IDE GitHub action and create a comment, status check, or both, depending on how you’ve configured the action inputs. With a Red Hat account, you can now try pull requests in a web-based IDE with the click of a link.&lt;/p&gt;</content><author><name>David Kwon</name></author><summary type="html">Cross posted from the Red Hat Developer blog.</summary></entry><entry><title type="html">Devfile v2 and the DevWorkspace Operator - Part 1</title><link href="https://che.eclipseprojects.io/2021/10/12/@mario.loriedo-devfile-v2-and-the-devworkspace-operator-p1.html" rel="alternate" type="text/html" title="Devfile v2 and the DevWorkspace Operator - Part 1" /><published>2021-10-12T00:00:00+00:00</published><updated>2021-10-12T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2021/10/12/@mario.loriedo/devfile-v2-and-the-devworkspace-operator-p1</id><content type="html" xml:base="https://che.eclipseprojects.io/2021/10/12/@mario.loriedo-devfile-v2-and-the-devworkspace-operator-p1.html">&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/devfile-v2-and-the-devworkspace-operator-part1/che-workspace-engines.png&quot; alt=&quot;Locally trusted certs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With version &lt;a href=&quot;https://github.com/eclipse/che/releases/tag/7.28.0&quot;&gt;7.28 of Che&lt;/a&gt; we have introduced a new workspace engine, &lt;a href=&quot;https://github.com/devfile/devworkspace-operator&quot;&gt;the DevWorkspace Operator&lt;/a&gt;, that supports v2 of the Devfile specification. Although the default engine is still the che-server we plan to replace it with the DevWorkspace in the next few months.&lt;/p&gt;

&lt;p&gt;Switching to the DevWorkspace engine has some important consequences. Notably on the authentication subsystem that will be lighter and more flexible, on the workspaces network managed by a central gateway powered by &lt;a href=&quot;https://github.com/traefik/traefik&quot;&gt;Traefik&lt;/a&gt; and simpler configuration options for Che administrators.&lt;/p&gt;

&lt;p&gt;This is the first of a series of three articles reviewing the changes introduced with the DevWorkspace. Here we will discuss the changes from the point of view of a Che user. The second part will be about the point of view of a Che administrator. The last part will be dedicated to the DevWorkspace Operator.&lt;/p&gt;

&lt;h2 id=&quot;how-to-enable-the-devworkspace-operator&quot;&gt;How to enable the DevWorkspace Operator&lt;/h2&gt;
&lt;p&gt;Che default workspace engine is the che-server. The DevWorkspace engine needs to be explicitly enabled. The following &lt;a href=&quot;https://github.com/che-incubator/chectl&quot;&gt;chectl&lt;/a&gt; command deploys Che on OpenShift configured with the DevWorkspace Operator as workspace engine:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chectl server:deploy &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; openshift &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                     &lt;span class=&quot;nt&quot;&gt;--workspace-engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dev-workspace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The command above works for other Kubernetes distributions too (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p openshift&lt;/code&gt; should be replaced) but, after chectl has completed, the CheCluster CustomResource requires a patch:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# For vanilla Kubernetes only&lt;/span&gt;
kubectl patch checluster/eclipse-che &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;merge &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; eclipse-che &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;--patch&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;spec&quot;: {&quot;server&quot;: { &quot;customCheProperties&quot;: {&quot;CHE_INFRA_KUBERNETES_ENABLE__UNSUPPORTED__K8S&quot;: &quot;true&quot;}}}}'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;changes-from-a-che-user-perspective&quot;&gt;Changes from a Che user perspective&lt;/h2&gt;

&lt;h3 id=&quot;new-devfile-spec-v21&quot;&gt;New Devfile spec (v2.1)&lt;/h3&gt;

&lt;p&gt;Here is an example of v2.1 Devfile:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;schemaVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.1.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python-hello-world&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;che-theia.eclipse.org/sidecar-policy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;USE_DEV_CONTAINER&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;quay.io/devfile/base-developer-image:ubi8-7bd4fe3&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;venv&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/user/.venv&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;memoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;512Mi&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;mountSources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;venv&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1G&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Devfile specification has gone through the release of v2. Here are a few notable changes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It is compatible with the specification of a Kubernetes API. The DevWorkspace CRD is an extension of the Kubernetes API and it’s generated from the Devfile specification.&lt;/li&gt;
  &lt;li&gt;It removes &lt;a href=&quot;https://github.com/eclipse/che/issues/18669&quot;&gt;chePlugin and cheEditor component types&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;It introduces the volume component type.&lt;/li&gt;
  &lt;li&gt;Events and parent are two new top level devfile properties.&lt;/li&gt;
  &lt;li&gt;Besides Che it’s used by the OpenShift Developer Console, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;odo&lt;/code&gt; and the &lt;a href=&quot;https://github.com/devfile/devfile-docker-plugin&quot;&gt;Devfile Docker plugin&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The documentation for Devfile v2.1 is &lt;a href=&quot;https://devfile.io/docs/devfile/2.1.0/user-guide/index.html&quot;&gt;https://devfile.io/docs/devfile/2.1.0/&lt;/a&gt;. A &lt;a href=&quot;https://devfile.io/docs/devfile/2.1.0/user-guide/migrating-to-devfile-v2.html&quot;&gt;migration guide from v1 to v2 of the specification&lt;/a&gt; is included.&lt;/p&gt;

&lt;h3 id=&quot;a-new-way-to-specify-the-editor-and-its-plugins&quot;&gt;A new way to specify the editor and its plugins&lt;/h3&gt;
&lt;p&gt;As mentioned above, version 2 of the Devfile, doesn’t include cheEditor and chePlugins component types anymore.&lt;/p&gt;

&lt;p&gt;The recommended way to specify the editor of a workspace is to include the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.che/che-editor.yaml&lt;/code&gt; at the root of the workspace git repository:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eclipse/che-theia/latest&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# mandatory&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;registryUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://my-registry.com&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# optional&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;# optional&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;theia-ide&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;memoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1280Mi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The recommended way to specify a che-theia plugin in a workspace is to include the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/extensions.json&lt;/code&gt; at the root of the workspace git repository:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;recommendations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ms-python.python&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is also possible to define a Che editor and its plugins inline in Devfile attributes, but that’s recommended only when it is not possible to colocate the devile with the source code. More informations about IDEs plugins with v2 of the Devfile can be found &lt;a href=&quot;https://che.eclipseprojects.io/2021/06/23/@florent.benoit-devfile-v2-and-ide-plug-ins.html&quot;&gt;in this blog post&lt;/a&gt; and at &lt;a href=&quot;https://github.com/eclipse/che/issues/18669&quot;&gt;https://github.com/eclipse/che/issues/18669&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-devfile-should-live-at-the-root-of-the-git-repo-not-in-a-registry&quot;&gt;The Devfile should live at the root of the git repo, not in a registry&lt;/h3&gt;
&lt;p&gt;The recommended place to publish the Devfile is within the project source code. Along with the files that we have just seen above to specify che-theia plugins and the editor:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  |--- devfile.yaml
  |___ .che
         |___ che-editor.yaml
         |___ che-theia-plugins.yaml
  |___ .vscode
         |___ extensions.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Having the Devfile at the root of a repository makes it possible to use a simple factory link to the repository to start the workspace. For example &lt;a href=&quot;https://workspaces.openshift.com/#https://github.com/eclipse/che-docs&quot;&gt;workspaces.openshift.com/#https://github.com/eclipse/che-docs&lt;/a&gt; is a factory link: when a user click on it, a workspace defined by the Devfile in the repo &lt;a href=&quot;https://github.com/eclipse/che-docs&quot;&gt;github.com/eclipse/che-docs&lt;/a&gt; will be started on the public Che instance hosted by Red Hat at workspaces.openshift.com.&lt;/p&gt;

&lt;p&gt;Recommending to colocate and evolve a v2 Devfile with the source code has two consequences:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;project&lt;/code&gt; section of a Devfile can be omitted: it’s implicitly set to the git repo where the Devfile lives&lt;/li&gt;
  &lt;li&gt;Che samples will include a Devfile at their root (those Devfiles used to be published in the Devfile registry)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;only-one-running-workspace-per-user&quot;&gt;Only one running workspace per user&lt;/h3&gt;
&lt;p&gt;A user cannot have more than one running workspace at a time. This limitation is related to the persistent volume strategy (“common”) that is used by Che. The same Volume is mounted by every workspace of the same user. This is implemented using Pods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;volumeMounts.subPath&lt;/code&gt; property and guarantees that the number of Volumes mounted by Che matches the number of users.&lt;/p&gt;

&lt;h2 id=&quot;current-limitations-and-timeline&quot;&gt;Current limitations and Timeline&lt;/h2&gt;

&lt;p&gt;Although most of the work has been completed, Che with the DevWorkspace enabled is not ready for production yet. Here is a list of open issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/issues/20501&quot;&gt;An admin should be able to specify secrets or config maps that need to be provisioned on each user’s namespace #20501&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/issues/20528&quot;&gt;Support custom certificates for git hosts for devworkspaces #20528&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/devfile/devworkspace-operator/issues/614&quot;&gt;Support Pod tolerations for DevWorkspace Pods devfile/devworkspace-operator#614&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/issues/20362&quot;&gt;Che with Devworkspaces should be able to use Dex as identity provider on OIDC enabled k8s #20362&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/issues/19341&quot;&gt;Create v2 devfiles for Getting Started samples&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/issues/20596&quot;&gt;Support overriding Che Theia plugins preferences and sidecar through .che/che-theia-plugins.yaml&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/issues/20460&quot;&gt;Adapt Che-Theia Activity Tracker extension to DevWorkspace mode (idling)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete list of issues and the due date can be tracked on the &lt;a href=&quot;https://github.com/eclipse/che/milestone/140&quot;&gt;GitHub milestone&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post we have described how to enable the DevWorkspace engine and reviewed the changes from the point of view of a user of Che.&lt;/p&gt;

&lt;p&gt;In the second part of this series we are going to look at the changes from an administrator point of view:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It’s possible to deploy only one Che instance per Kubernetes cluster&lt;/li&gt;
  &lt;li&gt;Devfiles are not in the registry anymore&lt;/li&gt;
  &lt;li&gt;Keycloak is not required anymore and Che users have to be Kubernetes users&lt;/li&gt;
  &lt;li&gt;Simpler configuration: namespace, persistent volumes, network&lt;/li&gt;
  &lt;li&gt;Use of external routes not supported&lt;/li&gt;
  &lt;li&gt;Metrics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The third part of this series will be about the DevWorkspace Operator:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Extending the Kubernetes API to provision Development Environments&lt;/li&gt;
  &lt;li&gt;Relationship between the DevWorkspace CRD and the Devfile v2&lt;/li&gt;
  &lt;li&gt;Relationship between the DevWorkspace Operator and the OpenShift WebTerminal&lt;/li&gt;
  &lt;li&gt;Comparison between the DevWorkspace controller and the che-server:
    &lt;ul&gt;
      &lt;li&gt;single tenant&lt;/li&gt;
      &lt;li&gt;no knowledge of IDEs and their extensions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DevWorkspaceTemplate and Plugins&lt;/li&gt;
  &lt;li&gt;Auto-mounting Secrets and ConfigMaps&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Mario Loriedo</name></author><summary type="html"></summary></entry><entry><title type="html">Backup and Restore of an Eclipse Che Installation</title><link href="https://che.eclipseprojects.io/2021/07/08/@mmorhun-backup-restore-che-installation.html" rel="alternate" type="text/html" title="Backup and Restore of an Eclipse Che Installation" /><published>2021-07-08T00:00:00+00:00</published><updated>2021-07-08T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2021/07/08/@mmorhun/backup-restore-che-installation</id><content type="html" xml:base="https://che.eclipseprojects.io/2021/07/08/@mmorhun-backup-restore-che-installation.html">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Any application that runs in production should be backed up regularly.
Even if the application runs inside a Kubernetes or Openshift cluster.
To back up an application in a Kubernetes cluster, a user should back up all the resources and definitions that the application uses.
It could be pretty easy in case when the application is, for example, a deployment with attached volume.
But what if the application has a lot of objects to back up?
In such case the task becomes more complicated and requires an understanding on how the components of the application work and interact with each other.
Or… just back up the whole cluster, however, such approach has a lot of overhead.&lt;/p&gt;

&lt;p&gt;To address this problem in &lt;a href=&quot;https://www.eclipse.org/che/&quot;&gt;Eclipse Che&lt;/a&gt;, the backup and restore feature was implemented.
With it, an admin doesn’t have to be aware of Eclipse Che internals in order to create a backup or do recovery of Che.
Eclipse Che (Eclipse Che operator to be more precise) can create backups and restore the installation even if a Che installation was completely deleted!
This works only if Che has been installed using the operator (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chectl server:deploy&lt;/code&gt; using installers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;olm&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let me show you how easy the process of backing up and restoring Che is now.
But first, let’s talk about backup servers a bit.&lt;/p&gt;

&lt;h3 id=&quot;internal-vs-external-backup-server&quot;&gt;Internal vs external backup server&lt;/h3&gt;

&lt;p&gt;When all data for backup is gathered into a snapshot, then it is encrypted and sent to a backup server.
The backup server should be set up beforehand and be accessible from within the cluster.
This step requires choosing the backup server type and manual configuration of it.&lt;/p&gt;

&lt;p&gt;To make life a bit easier, Eclipse Che can automatically set up and configure a backup server in the same cluster.
Such approach requires no additional configuration as everything is automated, but the main downside of it is that backups are stored in the same cluster and even the same namespace as Eclipse Che.&lt;/p&gt;

&lt;p&gt;Note, for production use, it is recommended to set up a backup server outside of the cluster.&lt;/p&gt;

&lt;h3 id=&quot;how-to-back-up-and-restore-che-using-chectl&quot;&gt;How to back up and restore Che using chectl&lt;/h3&gt;

&lt;h4 id=&quot;creating-backups&quot;&gt;Creating backups&lt;/h4&gt;

&lt;p&gt;To create a backup of Eclipse Che with &lt;a href=&quot;https://github.com/che-incubator/chectl#chectl&quot;&gt;chectl&lt;/a&gt; one should run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl server:backup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The command above will create a backup snapshot and send it to the configured backup server.
But if no backup server is configured, Che operator will deploy internal backup server and configure itself to use the server by default.&lt;/p&gt;

&lt;p&gt;To use an external backup server (or switch to another one), its URL and backups repository password should be provided, for example:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;checlt server:backup &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; rest:my-backups.domain.net:1234/che-backups &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; encryption-password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After execution of the command above, a new backup will be created and sent to the specified backup server.
Also, it will configure Che to use that backup server by default, so for the next backups just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chectl server:backup&lt;/code&gt; will be enough.&lt;/p&gt;

&lt;p&gt;Note, instead of using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; flag, it is possible to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BACKUP_REPOSITORY_PASSWORD&lt;/code&gt; environment variable.
Note, losing repository password means losing all the data stored in it as the password is used to decrypt the repository content.&lt;/p&gt;

&lt;h4 id=&quot;supported-types-of-backup-servers&quot;&gt;Supported types of backup servers&lt;/h4&gt;

&lt;p&gt;Eclipse Che uses an external tool called &lt;a href=&quot;https://restic.net/&quot;&gt;restic&lt;/a&gt; to manage backup snapshots.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;restic&lt;/code&gt; stores backup snapshots in a backup repository, where each snapshot is identified by a hash.
It also can connect to different kinds of servers that provide data storage capabilities.&lt;/p&gt;

&lt;p&gt;As of now, Eclipse Che supports the following types of backup servers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS S3&lt;/code&gt; and API compatible&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SFTP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/restic/rest-server#rest-server&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt; backup server&lt;/a&gt; is a dedicated server that’s specially designed to be used with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;restic&lt;/code&gt;.
It supports optional authentication by username and password:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REST_SERVER_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;user
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REST_SERVER_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;password
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl server:backup &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; rest:http://backups.my-domain.net:1234/che &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; encryption-password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Internal backup server is of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS S3&lt;/code&gt; storage and all API compatible implementations can be used as a backup server.
Requires setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; environment variables.
Example:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;BZK8W5&lt;span class=&quot;k&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;JKTa9TKoL&lt;span class=&quot;k&quot;&gt;*****&lt;/span&gt;dH6U+kP
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl server:backup &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; s3:s3.amazonaws.com/che-bucket &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; password
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SFTP&lt;/code&gt; storage.
It requires providing SSH key for passwordless login.
That could be done by providing the path to the file with the SSH key or the key itself (choose one):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SSH_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/user/.ssh/sftp.key
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# export SSH_KEY=-----BEGIN RSA PRIVATE KEY-----*****&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl server:backup sftp:user@my-host.net:1234//srv/static/che-backups
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;restoring-che-installation-form-a-backup&quot;&gt;Restoring Che installation form a backup&lt;/h4&gt;

&lt;p&gt;To restore Eclipse Che installation, simply run:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl server:restore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It will download the latest backup snapshot from the configured backup server and restore all Eclipse Che data from it.
If needed, it will even deploy a new Che cluster and apply data from the backup snapshot.&lt;/p&gt;

&lt;p&gt;But what if we created a dozen of backups and want to restore not from the latest backup available on the backup server, but an older one?
It is possible!
Just add backup snapshot ID with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;  flag to the restore command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl server:restore &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; f801da5c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where to get snapshot IDs?
There are two ways.
Snapshot ID is printed when a backup command executed:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Backup snapshot ID: f801da5c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Another way is to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;restic&lt;/code&gt; tool:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;restic &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; rest:my-backups.domain.net:1234/che-backups snapshots
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also, it is possible to use differnet backup server to restore from.
Just provide a backup server URL and repository password with needed credentials.
For example:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl server:restore &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; sftp:cheuser@my-sftp.domain.net:/srv/data/che-backups/ &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; encryption-password &lt;span class=&quot;nt&quot;&gt;--ssh-key-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.ssh/che-sftp.key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note, that the command above will change default backup server, so the next backup will be sent there unless another configuration provided.&lt;/p&gt;

&lt;h3 id=&quot;how-to-back-up-and-restore-che-via-custom-resources-objects&quot;&gt;How to back up and restore Che via custom resources objects&lt;/h3&gt;

&lt;h4 id=&quot;concept&quot;&gt;Concept&lt;/h4&gt;

&lt;p&gt;If someone doesn’t want to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chectl&lt;/code&gt; or want to have more control over the backup and restore process, it is possible to control backup and restore processes by directly managing backup related custom resources (CRs).
There are 3 types of CRs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheBackupServerConfiguration&lt;/code&gt; that holds information about a backup server and references to the secrets with credentials.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheClusterBackup&lt;/code&gt; requests a new backup and also points to an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheBackupServerConfiguration&lt;/code&gt; to where the backup snapshot should be sent.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheClusterRestore&lt;/code&gt; requests a new restore and holds reference to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheBackupServerConfiguration&lt;/code&gt; from where the backup snapshot should be downloaded.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note, that only creation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheClusterBackup&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheClusterRestore&lt;/code&gt; instances triggers backup and restore processes correspondingly.
Any editing of these resources has no effect.&lt;/p&gt;

&lt;p&gt;Under the hood, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chectl&lt;/code&gt; deals with the described CRs in order to create a backup or trigger a restore process.&lt;/p&gt;

&lt;h4 id=&quot;configuring-a-backup-server&quot;&gt;Configuring a backup server&lt;/h4&gt;

&lt;p&gt;Before backing up or restoring Che installation, at least one backup server configuration should be created.
Also, all secrets that are referenced from the CR must exist.
Then, the configuration might be referenced from backup and/or restore CR.&lt;/p&gt;

&lt;p&gt;Example backup server configuration for AWS S3 storage:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.eclipse.che/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CheBackupServerConfiguration&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;backup-server-configuration&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;awss3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;repositoryPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;che-bucket&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;repositoryPasswordSecretRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aws-backup-encryption-password-secret&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;awsAccessKeySecretRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aws-user-credentials-secret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Both secrets &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws-backup-encryption-password-secret&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;repo-password&lt;/code&gt; key and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws-user-credentials-secret&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awsAccessKeyId&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awsSecretAccessKey&lt;/code&gt; keys must exist.&lt;/p&gt;

&lt;p&gt;As it was described above, under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec&lt;/code&gt; section only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rest&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awss3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sftp&lt;/code&gt; is allowed.
CR definitions have self-explanatory fields and it will be easy to create a backup server configuration.
But note, that each subsection mutually excludes the others.
However, it is allowed to create as many backup server configurations as needed.&lt;/p&gt;

&lt;h4 id=&quot;backing-up&quot;&gt;Backing up&lt;/h4&gt;

&lt;p&gt;To create a new backup, a new CR of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheClusterBackup&lt;/code&gt; type should be created:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.eclipse.che/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CheClusterBackup&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eclipse-che-backup&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;backupServerConfigRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;backup-server-configuration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Right after the CR creation a new backup process will be started.
To monitor backup process state, one should look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; section of the created CR:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get CheClusterBackup eclipse-che-backup &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; eclipse-che &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; yaml | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 5 ^status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output of the command above looks like:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Backup&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;progress.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;time:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;timestamp&amp;gt;'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Collecting Che installation data&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;InProgress&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;message&lt;/code&gt; shows overall human readable status or an error message.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stage&lt;/code&gt; displays human readable current phase of backup process&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; indicates the overall state of the backup. Only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InProgress&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Succeeded&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Failed&lt;/code&gt; allowed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the process finishes successfully, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; section will contain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snapshotId&lt;/code&gt; field that could be used when restoring.
The CR might be deleted after backup is finished.&lt;/p&gt;

&lt;p&gt;If one need to request internal backup server and create a backup, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheClusterBackup&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useInternalBackupServer&lt;/code&gt; property set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; should be created:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.eclipse.che/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CheClusterBackup&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eclipse-che-backup&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;useInternalBackupServer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note, it will create an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheBackupServerConfiguration&lt;/code&gt; and corresponding secrets automatically.&lt;/p&gt;

&lt;h4 id=&quot;restoring&quot;&gt;Restoring&lt;/h4&gt;

&lt;p&gt;To restore from a backup snapshot, a new CR of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CheClusterRestore&lt;/code&gt; type should be created:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.eclipse.che/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;CheClusterRestore&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;eclipse-che-restore&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;backupServerConfigRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;backup-server-configuration&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By default the latest snapshot is taken.
However, it is possible to restore from a specific snapshot by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;snapshotId&lt;/code&gt; field under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec&lt;/code&gt; section.&lt;/p&gt;

&lt;p&gt;To monitor the restore state, one may read status of the corresponding CR:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get CheClusterRestore eclipse-che-restore &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; eclipse-che &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; yaml | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; 5 ^status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once the restore finishes, the CR can be deleted.&lt;/p&gt;

&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;

&lt;p&gt;As of now, there are two major limitations with backup and restore:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Backing up of user’s projects inside workspaces hasn’t been implemented yet. So, all not committed changes will not be restored.&lt;/li&gt;
  &lt;li&gt;Backup snapshots are bind to the specific cluster, so it is not possible to restore snapshot on another cluster in general case. This is because Che binds to some cluster ID’s.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other than that, back up and restore is a user friendly and straightforward process now.&lt;/p&gt;</content><author><name>Mykola Morhun</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Devfile v2 and IDE plug-ins</title><link href="https://che.eclipseprojects.io/2021/06/23/@florent.benoit-devfile-v2-and-ide-plug-ins.html" rel="alternate" type="text/html" title="Devfile v2 and IDE plug-ins" /><published>2021-06-23T00:00:00+00:00</published><updated>2021-06-23T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2021/06/23/@florent.benoit/devfile-v2-and-ide-plug-ins</id><content type="html" xml:base="https://che.eclipseprojects.io/2021/06/23/@florent.benoit-devfile-v2-and-ide-plug-ins.html">&lt;h3 id=&quot;definition&quot;&gt;Definition&lt;/h3&gt;

&lt;p&gt;Devfile has been incubated by Eclipse Che project providing &lt;a href=&quot;https://redhat-developer.github.io/devfile/&quot;&gt;devfile v1 specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To allow other projects to use a common definition, devfile has moved out of Eclipse Che. It has its own definition at &lt;a href=&quot;https://devfile.io&quot;&gt;https://devfile.io&lt;/a&gt; with current &lt;a href=&quot;https://docs.devfile.io/devfile/2.1.0/user-guide/api-reference.html&quot;&gt;v2.1.0 specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Devfiles v1 were handled by Eclipse Che Server workspace engine using Java/Kubernetes API. There is a new engine for v2 Devfiles called DevWorkspace Controller. The source code is at: &lt;a href=&quot;https://github.com/devfile/devworkspace-operator&quot;&gt;https://github.com/devfile/devworkspace-operator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;DevWorkspaces are custom Kubernetes resources and can be created/listed/deleted using any Kubernetes client like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A DevWorkspace is a workspace using the new engine and supporting Devfile v2 definition.&lt;/p&gt;

&lt;h3 id=&quot;milestones&quot;&gt;Milestones&lt;/h3&gt;

&lt;p&gt;Devfile v2 support in Eclipse Che can be followed by milestones.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/milestone/136&quot;&gt;Milestone 1&lt;/a&gt; introduced the first support of Devfile v2 (start a basic workspace)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/milestone/139&quot;&gt;Milestone 2&lt;/a&gt; just landed in Eclipse Che 7.32.0 with the support of Theia plug-ins for DevWorkspaces&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/che/issues/20830&quot;&gt;End Game&lt;/a&gt; is the End Game issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-to-test&quot;&gt;How to test ?&lt;/h3&gt;

&lt;p&gt;The support of Devfile v2/DevWorkspaces is optional and need to be opt-in.&lt;/p&gt;

&lt;p&gt;When the support is enabled, both Devfile v1 and v2 are supported. You can still work with your previous workspaces and Devfile v1.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt; has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apiVersion 1.0.0&lt;/code&gt;, it will use Che server workspace engine to deploy this Devfile.&lt;/li&gt;
  &lt;li&gt;If the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt; has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;schemaVersion 2.0.0&lt;/code&gt; (or greater like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2.1.0&lt;/code&gt;), it will use the DevWorkspace controller to deploy this Devfile.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⚠️ DevWorkspaces requires OpenShift as platform until Milestone 3 is reached (vanilla Kubernetes is not supported yet)&lt;/p&gt;

&lt;p&gt;ℹ️ When DevWorkspace is enabled, single-host deployment is enforced. As a consequence, when the Che host certificate is untrusted, there is no need to locally install it.&lt;/p&gt;

&lt;p&gt;To enable DevWorkspaces, use a custom spec object for Che Operator:&lt;/p&gt;

&lt;p&gt;Creates a file in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}&lt;/code&gt; folder for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}/enable-devfilev2.yaml&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;devWorkspace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;enable&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install Eclipse Che (latest stable ≥7.32 or next channel) with chectl:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl update next &lt;span class=&quot;c&quot;&gt;# (or stable)  &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;chectl server:deploy &lt;span class=&quot;nt&quot;&gt;--che-operator-cr-patch-yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/enable-devfilev2.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, search for the Dashboard link in the chectl output:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;✔ Eclipse Che 7.33.0-SNAPSHOT has been successfully deployed.  
  ✔ Documentation        : [https://www.eclipse.org/che/docs/](https://www.eclipse.org/che/docs/)  
  ✔ -------------------------------------------------------------  
  ✔ Users Dashboard      : https://che-eclipse-che.my-che.com/  
  ✔ -------------------------------------------------------------  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Opening the Dashboard page will display the new getting started:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/devfile-v2-and-ide-plugins/dashboard-getting-started.png&quot; alt=&quot;Getting Started&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on a sample will use a Devfile v2 and the DevWorkspace engine.&lt;/p&gt;

&lt;p&gt;ℹ️ &lt;a href=&quot;https://www.eclipse.org/che/docs/che-7/installation-guide/enabling-dev-workspace-engine/&quot;&gt;The installation guide is also available in Eclipse Che documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;updating-from-devfilev1&quot;&gt;Updating from Devfile v1&lt;/h3&gt;

&lt;p&gt;While the syntax between v1 and v2 yaml definition is close, there is a major change in the DevWorkspace definition: the IDE plug-ins are no longer part of the Devfile.&lt;/p&gt;

&lt;p&gt;It brings more clarity: for example, it was possible to include a java plug-in but it was unclear that it required the Eclipse Theia editor and that it would not work with other supported editors. Also, when the Devfile was consumed by other tools like &lt;a href=&quot;https://developers.redhat.com/products/odo/overview&quot;&gt;odo&lt;/a&gt; that don’t have the notion of plugin or editor, those components were ignored.&lt;/p&gt;

&lt;p&gt;Another change in the lifecycle of a workspace is that the project clone operation is done by the DevWorkspace engine. So whatever Che editor is picked-up, the project will always be cloned in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/projects/&amp;lt;your-project&amp;gt;&lt;/code&gt; location after the workspace start (no matter if there is an editor/IDE or not).&lt;/p&gt;

&lt;h3 id=&quot;plug-ins-definition&quot;&gt;Plug-ins definition&lt;/h3&gt;

&lt;h4 id=&quot;ide-preferences&quot;&gt;IDE preferences&lt;/h4&gt;

&lt;p&gt;While IDE plug-ins are no longer part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt;, instead or reinventing a new file format to specify an IDE plugins, the idea was to leverage the already existing definition files.&lt;/p&gt;

&lt;p&gt;For example VS Code has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/extensions.json&lt;/code&gt; file where plug-ins can be recommended.&lt;/p&gt;

&lt;p&gt;Eclipse Che now supports this file format and, when it founds one and the editor is Eclipse Theia, it will add the corresponding VS Code extensions to the DevWorkspace.&lt;/p&gt;

&lt;p&gt;Specifying&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;recommendations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redhat.java&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/extensions.json&lt;/code&gt; will automatically install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redhat/java&lt;/code&gt; VS Code extension in the Eclipse Che workspace.&lt;/p&gt;

&lt;p&gt;Note: if the specified set of extensions IDs are not available in the Eclipse Che plug-in registry, the workspace creation won’t fail but the extensions won’t be included.&lt;/p&gt;

&lt;p&gt;The list of the VS Code extension that can be included in a Che Theia workspace are available on the online registry at &lt;a href=&quot;https://eclipse-che.github.io/che-plugin-registry/main/v3/plugins/&quot;&gt;https://eclipse-che.github.io/che-plugin-registry/main/v3/plugins/&lt;/a&gt;. The registry is continuously updated when PRs get merged on Che plugin registry main branch.&lt;/p&gt;

&lt;h4 id=&quot;custom-definition&quot;&gt;Custom definition&lt;/h4&gt;

&lt;p&gt;Relying on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/extensions.json&lt;/code&gt; is great but, to run a VS Code extension as a Kubernetes workload, may require some extra specifications that are not part of this file format.&lt;/p&gt;

&lt;p&gt;Here comes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.che/che-theia-plugins.yaml&lt;/code&gt; optional file.&lt;/p&gt;

&lt;p&gt;For example, overriding some container settings like the memoryLimit for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redhat.java&lt;/code&gt; plug-in.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redhat/java&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;override&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;sidecar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;memoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2Gi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;inlining&quot;&gt;Inlining&lt;/h4&gt;

&lt;p&gt;Sometimes it may not be possible to include the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/extensions.json&lt;/code&gt; or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.che/che-theia-plugins.yaml&lt;/code&gt; in the git repository.&lt;/p&gt;

&lt;p&gt;Inlining the content of these files in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt; file is somehow possible using the following syntax of the Devfile:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;schemaVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.1.0&lt;/span&gt;  
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-example&lt;/span&gt;  
&lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;.vscode/extensions.json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;  
    &lt;span class=&quot;s&quot;&gt;{  &lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&quot;recommendations&quot;: [  &lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;redhat.java&quot;  &lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;]  &lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To inline &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.che/che-theia-plugins.yaml&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;na&quot;&gt;schemaVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.1.0&lt;/span&gt;  
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-example&lt;/span&gt;  
&lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;.che/che-theia-plugins.yaml&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;  
    &lt;span class=&quot;s&quot;&gt;- id: redhat/java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;workflow-of-handling-ide-plug-ins-with-workspaces&quot;&gt;Workflow of handling IDE plug-ins with workspaces&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/devfile-v2-and-ide-plugins/devfile2-workflow.png&quot; alt=&quot;devfile v2 workflow&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;new-features-forplug-ins&quot;&gt;New Features for plug-ins&lt;/h3&gt;

&lt;p&gt;Although excluding the IDE plug-ins from the Devfile specification represents a big change, each editor can now bring new features more easily. Each editor can directly update a workspace using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DevWorkspaceTemplate&lt;/code&gt; objects based on its configuration files (like optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/extensions.json&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.che/che-theia-plugins.yaml&lt;/code&gt; files).&lt;/p&gt;

&lt;h4 id=&quot;deploy-plug-ins-in-existing-containers&quot;&gt;Deploy plug-ins in existing containers&lt;/h4&gt;

&lt;p&gt;By default, in Eclipse Che and when using Eclipse Theia editor, IDE plug-ins were deployed either in the Che-Theia container (when it only requires nodejs runtime) or through a new sidecar container (for example for Java, Go, Python, Php, etc.)&lt;/p&gt;

&lt;p&gt;In that case, all plugins requiring a sidecar will be deployed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user defined container&lt;/code&gt; and not in their specific sidecar container.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;If a repository contains these two files:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt; with the following content:
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;schemaVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.1.0&lt;/span&gt;  
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-example&lt;/span&gt;  
&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tools&lt;/span&gt;  
 &lt;span class=&quot;na&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
   &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registry.access.redhat.com/ubi8/openjdk-11&lt;/span&gt;  
   &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;tail'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;  
   &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-f'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/dev/null'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;And the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/extensions.json&lt;/code&gt; containing
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;recommendations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redhat.java&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The plug-in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redhat.java&lt;/code&gt; will be started inside the tools container and in its own sidecar container.&lt;/p&gt;

&lt;p&gt;For this to work the tools container should include the plug pre-requisites otherwise the VS Code java extension will fail to start.&lt;/p&gt;

&lt;p&gt;To disable this behaviour, use the following attribute:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;che-theia.eclipse.org/sidecar-policy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mergeImage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;prebuilt-devworkspace-templates&quot;&gt;Prebuilt DevWorkspace templates&lt;/h4&gt;

&lt;p&gt;With Devfile v1 the flow was the following: a user selects a getting started example, the Dashboard fetches the Devfile, the plug-in broker analyzes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt; fetches the content from linked plug-in registries, parses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta.yaml&lt;/code&gt; of these plug-ins, extracts the sidecar containers definitions and, finally, adds some containers to the workspace definition.&lt;/p&gt;

&lt;p&gt;With Devfile v2, these steps with a lot of yaml/json transformations are still present but the output result is a set of DevWorkspace templates that will be applied on the Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;Those DevWorkspace templates can be generated at build time rather than at runtime. The Che-Theia library, with a Devfile provided as input (the optional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/extensions.json&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.che/che-theia-plugins.yaml&lt;/code&gt; files), generates a yaml file that includes the definition of the DevWorkspace templates.&lt;/p&gt;

&lt;p&gt;npx @eclipse-che/che-theia-devworkspace-handler –devfile-url:&lt;a href=&quot;https://github.com/che-samples/spring-petclinic/tree/devfilev2&quot;&gt;https://github.com/che-samples/spring-petclinic/tree/devfilev2&lt;/a&gt; –output-file:$(pwd)/all-in-one.yaml&lt;/p&gt;

&lt;p&gt;Then this file can be used directly by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl apply -f all-in-one.yaml -n my-namespace&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These templates can be included in the Devfile registry and the Eclipse Che Dashboard will apply them directly instead of processing the original Devfile at every workspace start.&lt;/p&gt;

&lt;h3 id=&quot;plug-in-registrychanges&quot;&gt;Plug-in registry changes&lt;/h3&gt;

&lt;p&gt;For workspaces using Devfile v1, Eclipse Che server fetches a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta.yaml&lt;/code&gt; files from the plug-in registry. There are some limitations, for example defining plug-in preferences is only possible if there is a sidecar being defined, etc.&lt;/p&gt;

&lt;p&gt;With DevWorkspaces, the plug-in registry export now the content provided in different formats. It still exports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta.yaml&lt;/code&gt; files but it also exposes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt; files for Eclipse Che editors definition and for some plug-ins that are not IDE plug-ins like che-machine-exec (library to be able connect to a specific container in a workspace/pod).&lt;/p&gt;

&lt;p&gt;Also the Che-Theia IDE plug-ins are now exposed by their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;che-theia-plugin.yaml&lt;/code&gt; fragment.&lt;/p&gt;

&lt;p&gt;Every Che-Theia plug-in fragment is generated from the &lt;a href=&quot;https://github.com/eclipse-che/che-plugin-registry/blob/main/che-theia-plugins.yaml&quot;&gt;che-theia-plugins.yaml file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An hosted version of the che-plugin-registry is available after each commit at &lt;a href=&quot;https://eclipse-che.github.io/che-plugin-registry/main&quot;&gt;https://eclipse-che.github.io/che-plugin-registry/main&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Corresponding definition for&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redhat/java&lt;/code&gt; IDE plug-in is available at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://eclipse-che.github.io/che-plugin-registry/main/v3/plugins/redhat/java/latest/che-theia-plugin.yaml&quot;&gt;https://eclipse-che.github.io/che-plugin-registry/main/v3/plugins/redhat/java/latest/che-theia-plugin.yaml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It references the dependencies of this IDE plug-in and its preferences (whereas with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta.yaml&lt;/code&gt; the notion of dependency didn’t exist and all the required &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vsix&lt;/code&gt; had to be specified in the file)&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;preferences&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;java.server.launchMode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Standard&lt;/span&gt;  
&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vscjava/vscode-java-debug&lt;/span&gt;  
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vscjava/vscode-java-test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;eclipse-che-devfile-registrychanges&quot;&gt;Eclipse Che Devfile registry changes&lt;/h3&gt;

&lt;p&gt;The index of the Devfile registry is providing a list of Devfiles to use. But now, Devfile v2 as some other optional files may be required, it’s better to reference a repository rather than a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;New links are available in the Devfile registry. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v2&lt;/code&gt; links are links to either repositories or devfiles.&lt;/p&gt;

&lt;p&gt;Here is an example of a minimal index of a Devfile registry:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;displayName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Java Spring Boot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/images/springboot.svg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;links&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;v2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/che-samples/java-spring-petclinic/tree/devfilev2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;self&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/devfiles/java-web-spring/devfile.yaml&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the DevWorkspaces is enabled and there are some v2 links in the Devfile registry, only Devfile v2 getting started will be shown on the Dashboard (Devfile v1 getting started will be hidden). Each of these samples will use the new DevWorkspace engine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/devfile-v2-and-ide-plugins/dashboard-getting-started.png&quot; alt=&quot;Getting Started&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In addition to those changes, there is an ongoing effort to merge Che Devfile registry and &lt;a href=&quot;https://registry.devfile.io&quot;&gt;community Devfile registry&lt;/a&gt;. This work is part of the &lt;a href=&quot;https://github.com/devfile/registry&quot;&gt;Devfile project&lt;/a&gt; that is planned to become &lt;a href=&quot;https://github.com/devfile/api/issues/426&quot;&gt;a CNCF sandbox project&lt;/a&gt;.&lt;/p&gt;</content><author><name>Florent Benoit</name></author><summary type="html">Definition</summary></entry><entry><title type="html">Use mkcert to Trust Local Che Certificates</title><link href="https://che.eclipseprojects.io/2021/01/07/@mario.loriedo-use-mkcert-to-trust-local-che-certificates.html" rel="alternate" type="text/html" title="Use mkcert to Trust Local Che Certificates" /><published>2021-01-07T00:00:00+00:00</published><updated>2021-01-07T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2021/01/07/@mario.loriedo/use-mkcert-to-trust-local-che-certificates</id><content type="html" xml:base="https://che.eclipseprojects.io/2021/01/07/@mario.loriedo-use-mkcert-to-trust-local-che-certificates.html">&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/mkcert/header.png&quot; alt=&quot;Locally trusted certs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When deploying Che locally, on minikube for example, its TLS certificate will be self-signed and not trusted by the local browsers.&lt;/p&gt;

&lt;p&gt;In this blog post we are going to see how we can generate TLS certificates using &lt;a href=&quot;https://mkcert.dev/&quot;&gt;mkcert&lt;/a&gt; and configure Che to use them. Those certificates will be always locally-trusted.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-with-untrusted-tls-certificates&quot;&gt;The problem with untrusted TLS certificates&lt;/h2&gt;

&lt;p&gt;When Che SSL certificate is signed by an unknown CA, the certificate won’t be trusted by the local browser and Che users have to download and locally import the TLS certificate&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; (&lt;a href=&quot;https://www.eclipse.org/che/docs/che-7/installation-guide/installing-che-on-minikube/#importing-certificates-to-browsers_che&quot;&gt;we have even documemented the instructions for different browsers&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Locally importing a CA certificate is a repetitive and error prone task. A new CA certificate needs to be imported at every local Che install. That’s annyoing, especially if like me you deploy Che often.&lt;/p&gt;

&lt;p&gt;Someone may argue that with &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; or &lt;a href=&quot;https://zerossl.com/&quot;&gt;ZeroSSL&lt;/a&gt; issueing a valid certificates is straighforward. But that won’t for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nip.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could automate the import of the certificate at the end of every Che deploy too. But, instead of reinventing the wheel, we are going to use &lt;a href=&quot;https://mkcert.dev/&quot;&gt;mkcert&lt;/a&gt;. That’s a command line tool to manage local TLS certificates:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mkcert is a simple tool for making locally-trusted development certificates. It requires no configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;issue-a-locally-trusted-che-certificate&quot;&gt;Issue a locally-trusted Che certificate&lt;/h2&gt;

&lt;p&gt;The following steps will guide you through the generation of a TLS certificate for Che ingresses signed by a CA that is trusted by your system and browsers.&lt;/p&gt;

&lt;h3 id=&quot;step1---install-mkcert&quot;&gt;STEP1 - Install mkcert&lt;/h3&gt;

&lt;p&gt;Instructions to install mkcert are in the GitHub repository &lt;a href=&quot;https://github.com/FiloSottile/mkcert#installation&quot;&gt;README file&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;step2---create-a-local-ca&quot;&gt;STEP2 - Create a local CA&lt;/h3&gt;

&lt;p&gt;In order to generate a valid certificate we need a trusted Certificate Authority to sign them.&lt;/p&gt;

&lt;p&gt;The following &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkcert&lt;/code&gt; command generates a CA certificate and key:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkcert &lt;span class=&quot;nt&quot;&gt;-install&lt;/span&gt;   
Using the &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;CA at “/Users/mariolet/Library/Application Support/mkcert” ✨  
The &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;CA is already installed &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the system trust store! 👍  
The &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;CA is already installed &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the Firefox trust store! 👍
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As a result a CA certificate and private key will created in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkcert&lt;/code&gt; data folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/Library/Application Support/mkcert/&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/mkcert/
total 16
&lt;span class=&quot;nt&quot;&gt;-r--------&lt;/span&gt;  1 mloriedo  staff  2484 Jul 20  2020 rootCA-key.pem
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt;  1 mloriedo  staff  1720 Jul 20  2020 rootCA.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The CA is trusted by the OS and by my local Firefox.&lt;/p&gt;

&lt;p&gt;This is a one time operation as I can use this same CA to sign certificates for different Che deployments, even on different clusters.&lt;/p&gt;

&lt;h3 id=&quot;step3---retrieve-che-domain-name&quot;&gt;STEP3 - Retrieve Che domain name&lt;/h3&gt;

&lt;p&gt;Assuming that Che has already been deployed (here are the instructions), the following command is&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ CHE_DOMAIN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;kubectl get ingress &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;--all-namespaces&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app.kubernetes.io/name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;che&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;app.kubernetes.io/component&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;che&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
         &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jsonpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'{.items[*].spec.tls[0].hosts[0]}'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_DOMAIN_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
192.168.64.34.nip.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube&lt;/code&gt; the domain name contains the IP address of the VM (for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;192.168.64.34.nip.io&lt;/code&gt;). This step and the following one should be repeated when the IP changes (if the cluster gets recreated for example).&lt;/p&gt;

&lt;h3 id=&quot;step4---generate-a-locally-trusted-tls-certificate-for-che&quot;&gt;STEP4 - Generate a locally-trusted TLS certificate for Che&lt;/h3&gt;

&lt;p&gt;With the CA created at STEP 2 we can issue locally-trusted TLS certificates for any domain. And, compared to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;openssl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkcert&lt;/code&gt; makes the operation easy.&lt;/p&gt;

&lt;p&gt;To generates a certificate for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${CHE_DOMAIN_NAME}&lt;/code&gt; retrieved at the previous step:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkcert &lt;span class=&quot;s2&quot;&gt;&quot;*.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_DOMAIN_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
Created a new certificate valid &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the following names 📜  
 — “&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.192.168.64.34.nip.io”

Reminder: X.509 wildcards only go one level deep, so this won’t match a.b.192.168.64.34.nip.io ℹ️

The certificate is at “./_wildcard.192.168.64.34.nip.io.pem” and the key at “./_wildcard.192.168.64.34.nip.io-key.pem” ✅

It will expire on 29 March 2023 🗓
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have just generated a wildcard TLS certificate and private key for Che that is valid until 2023.&lt;/p&gt;

&lt;h3 id=&quot;step5---configure-che-to-use-the-new-certificate&quot;&gt;STEP5 - Configure Che to use the new certificate&lt;/h3&gt;

&lt;p&gt;To configure Che to use the certificate generated above we should create a &lt;a href=&quot;https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets&quot;&gt;Kubernetes tls secret&lt;/a&gt;. We will name it &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;che-custom-tls&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ CHE_TLS_CERT_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./_wildcard.192.168.64.34.nip.io.pem    &lt;span class=&quot;c&quot;&gt;# Replace the value with the cert path from previous step&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;CHE_TLS_KEY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./_wildcard.192.168.64.34.nip.io-key.pem &lt;span class=&quot;c&quot;&gt;# Replace the value with the key path from previous step&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;CHE_SERVER_NAMESPACE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;workspaces-server                    &lt;span class=&quot;c&quot;&gt;# Replace the value with Che server namespace&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;CHE_TLS_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;che-custom-tls
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create secret tls &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_TLS_SECRET&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_SERVER_NAMESPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_TLS_KEY_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;--cert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_TLS_CERT_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
secret/che-custom-tls created
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now update Che configuration to use this secret:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ CHE_CLUSTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eclipse-che   &lt;span class=&quot;c&quot;&gt;# Replace the value with CheCluster CR name&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl patch checluster &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_CLUSTER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'json'&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_SERVER_NAMESPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/spec/k8s/tlsSecretName&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_TLS_SECRET&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}]&quot;&lt;/span&gt;
checluster.org.eclipse.che/eclipse-che patched
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A last command is required to include the local CA certificate, created at step 2, in the CA bundle of Che workspaces trusted certificates. This is required to allow communications between workspaces and the Che server.&lt;/p&gt;

&lt;p&gt;The convention used to add a certificate in Che CA bundle is via a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConfigMap&lt;/code&gt; in Che server namepsace with labels &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.kubernetes.io/part-of=che.eclipse.org&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.kubernetes.io/component=ca-bundle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ LOCAL_CA_CERT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/mkcert/rootCA.pem  
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl create configmap custom-certs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_SERVER_NAMESPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;--from-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LOCAL_CA_CERT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
configmap/custom-certs created
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl label configmap custom-certs &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           app.kubernetes.io/part-of&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;che.eclipse.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           app.kubernetes.io/component&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ca-bundle &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_SERVER_NAMESPACE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
configmap/custom-certs labeled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;verification&quot;&gt;Verification&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://che.eclipseprojects.io//assets/img/mkcert/trusted-cert.png&quot; alt=&quot;Trusted Certificate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have followed the steps described above, when opening the Che dashboard in your local browser, you should see that the certificate is considered valid. Starting a workspace should also work without any issue.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Adding the URL among the browser exceptions is not enough. Even in single-host mode (when Che uses one unique domain for every endpoint) a fully trusted TLS certificate is required to use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;the service worker API&lt;/a&gt; &lt;a href=&quot;https://github.com/eclipse/che/issues/18566&quot;&gt;required by the IDE&lt;/a&gt; running in the browser. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Mario Loriedo</name></author><summary type="html"></summary></entry><entry><title type="html">How to quickly deploy a VS Code extension on Eclipse Che</title><link href="https://che.eclipseprojects.io/2020/07/24/@florent.benoit-how-to-quickly-deploy-a-vs-code-extension-on-eclipse-che.html" rel="alternate" type="text/html" title="How to quickly deploy a VS Code extension on Eclipse Che" /><published>2020-07-24T00:00:00+00:00</published><updated>2020-07-24T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2020/07/24/@florent.benoit/how-to-quickly-deploy-a-vs-code-extension-on-eclipse-che</id><content type="html" xml:base="https://che.eclipseprojects.io/2020/07/24/@florent.benoit-how-to-quickly-deploy-a-vs-code-extension-on-eclipse-che.html">&lt;h4 id=&quot;introduction&quot;&gt;Introduction&lt;/h4&gt;

&lt;p&gt;Eclipse Che is supporting VS Code extensions in its IDE.&lt;/p&gt;

&lt;p&gt;Each workspace can have its own set of plug-ins. This definition of plug-ins is stored inside a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt;file containing as well the list of projects to clone.&lt;/p&gt;

&lt;p&gt;From the dashboard, there is a list of plug-ins that can be enabled on a given workspace.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*AljynvaP6VGvLx1hr4UdwA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When a plug-in is enabled, a new entry is added in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;For example, enabling AsciiDoc plug-in is adding the following snippet in my devfile.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*JDXduFwsoaxMokw49VxXpA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s easy but what if the plug-in that I want to try is not in the default Eclipse Che plug-in registry ?&lt;/p&gt;

&lt;p&gt;Here come multiple ideas. One of them is to fork the current plug-in-registry repository, rebuild the docker image, deploy it and use this registry. It’s very powerful for ‘in-house’ use-cases, etc but it might be a big effort at first.&lt;/p&gt;

&lt;h4 id=&quot;setup-configuration&quot;&gt;Setup configuration&lt;/h4&gt;

&lt;p&gt;Let’s try to make it very simple by just using Github and its &lt;a href=&quot;https://gist.github.com/&quot;&gt;gist&lt;/a&gt; service.&lt;/p&gt;

&lt;p&gt;Go on &lt;a href=&quot;https://gist.github.com/&quot;&gt;https://gist.github.com/&lt;/a&gt; and create a README.md file saying for example that : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Try Bracket Pair Colorizer extension in Eclipse Che&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It’s because I want to try &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&quot;&gt;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&lt;/a&gt; with its 3M of downloads !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*K9B6-Ivap24YRGPvlEXYkg.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*o9fowXf0ylqqqSZacNRa0w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create secret gist&lt;/code&gt; button&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*p2f_G6UbZ_MXvjY2NtbWdQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You might not know, but behind a gist, there is a git repository. Let’s clone this repository by using the URL from the navbar.&lt;/p&gt;

&lt;p&gt;Git clone command will look like:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://gist.github.com/&amp;lt;github-username&amp;gt;/&amp;lt;very-long-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my case it was&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://gist.github.com/benoitf/85c60c8c439177ac50141d527729b9d9                                                                                                                                                
Cloning into &lt;span class=&quot;s1&quot;&gt;'85c60c8c439177ac50141d527729b9d9'&lt;/span&gt;...  
remote: Enumerating objects: 3, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  
remote: Counting objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3/3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  
remote: Total 3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, pack-reused 0  
Unpacking objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3/3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then we enter into this cloned directory&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;85c60c8c439177ac50141d527729b9d9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;create-the-devfile-and-plug-ins-definition&quot;&gt;Create the devfile and plug-ins definition&lt;/h4&gt;

&lt;p&gt;First, download the plug-in from the VS Code marketplace &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&quot;&gt;https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer&lt;/a&gt; or from its github page &lt;a href=&quot;https://github.com/CoenraadS/BracketPair/releases&quot;&gt;https://github.com/CoenraadS/BracketPair/releases&lt;/a&gt; and store the file in the cloned directory&lt;/p&gt;

&lt;p&gt;Then, we need to add a definition of this plug-in through a yaml file.&lt;/p&gt;

&lt;p&gt;Let’s create this file in the cloned directory
&lt;script src=&quot;https://gist.github.com/benoitf/04e840a453e46f243c07c2254d68ea0a.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Two remarks there:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This extension seems to only require nodejs runtime so in the yaml definition I didn’t specified a custom runtime image.&lt;/li&gt;
  &lt;li&gt;I’m using  in URL to later compute this link to avoid to search the public URL of the file for now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;note: in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spec&lt;/code&gt; section, we can specify a custom runtime image, memory limit and some extra volumes, but for the use-case of this simple extension, it was not required.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;quay.io/eclipse/che-sidecar-java:8-0cfbacb&quot;&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vscode-java&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;memoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1500Mi&quot;&lt;/span&gt;  
      &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/home/theia/.m2&quot;&lt;/span&gt;  
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;m2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin.vsix&lt;/code&gt;file is there, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plugin.yaml&lt;/code&gt; file is there and we only need our workspace definition: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile.yaml&lt;/code&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/2bce0908836d8dce9171016eafb334f9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;You could have taken any other devfile definition., the only important information from this devfile are the lines&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chePlugin&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/plugin.yaml&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It means that we’ll add a custom plug-in using an external reference vs just an id pointing to a definition inside the default plug-in registry.&lt;/p&gt;

&lt;p&gt;To sum up, we have 4 files in the current git directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-la&lt;/span&gt;  
.git  
CoenraadS.bracket-pair-colorizer-1.0.61.vsix  
README.md  
devfile.yaml  
plugin.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will need to commit the files to our repository, but before, we will add a pre-commit hook to update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{{ REPOSITORY }}&lt;/code&gt; variable to the public external raw gist link.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# download this script  &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://gist.githubusercontent.com/benoitf/e1dd101a6ae157e7e498453dbf683137/raw/2c332278c5a8018b6669da661bbdc6fa10dfb872/pre-commit.sh &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; .git/hooks/pre-commit

&lt;span class=&quot;c&quot;&gt;# make it executable  &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;u+x .git/hooks/pre-commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pre-commit hook is in place, it’s time to commit our files&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*0FbflRWYdDICdYwAfPYRGA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…commit the files…&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Initial Commit for the test of our extension&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;                                                                                                                      

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master 98dd370] Initial Commit &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;of our extension  
 3 files changed, 61 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
 create mode 100644 CoenraadS.bracket-pair-colorizer-1.0.61.vsix  
 create mode 100644 devfile.yaml  
 create mode 100644 plugin.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… and push the files to the main branch&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By going back to the gist website, we can see that all links have been updated with the correct public URL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*jUjdaNPgGRmZSeEe44fqYg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now it’s time to experiment our devfile by entering the command to check that online !&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;open &lt;span class=&quot;s2&quot;&gt;&quot;https://che.openshift.io/f/?url=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--get&lt;/span&gt; remote.origin.url&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/raw/devfile.yaml&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or if you only want the link&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://che.openshift.io/f/?url=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git config &lt;span class=&quot;nt&quot;&gt;--get&lt;/span&gt; remote.origin.url&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/raw/devfile.yaml&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can now code with nice brackets :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*T0IcGezki-m-bHM8DB3V7A.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Florent Benoit</name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Working offline with Eclipse Che</title><link href="https://che.eclipseprojects.io/2020/04/29/@florent.benoit-working-offline-with-eclipse-che.html" rel="alternate" type="text/html" title="Working offline with Eclipse Che" /><published>2020-04-29T00:00:00+00:00</published><updated>2020-04-29T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2020/04/29/@florent.benoit/working-offline-with-eclipse-che</id><content type="html" xml:base="https://che.eclipseprojects.io/2020/04/29/@florent.benoit-working-offline-with-eclipse-che.html">&lt;p&gt;Eclipse Che has many thousands of users. Most of them use the VS Code-inspired browser IDE, but sometimes you know you’re going to be offline for awhile and want to be able to work with a local editor, then sync back your changes when you’re back online.&lt;/p&gt;

&lt;p&gt;Obviously if you only care about changes to the source code then git will handle this just fine. But if you want to run it offline, make changes to your tools, runtimes or dependencies then it’s great to be able to have all that synced back to Eclipse Che.&lt;/p&gt;

&lt;p&gt;In this article we’ll cover how to set this up, by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Updating your Eclipse Che workspace to allow rsync.&lt;/li&gt;
  &lt;li&gt;Importing files into your local computer/laptop.&lt;/li&gt;
  &lt;li&gt;Edit/work with your project on your laptop&lt;/li&gt;
  &lt;li&gt;Synchronize back all code changes from your laptop to the remote workspace.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;h3 id=&quot;1-on-my-laptop-check-all-tools-are-available&quot;&gt;1. On my laptop: check all tools are available&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Check local installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; on the laptop by trying to execute the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ rsync&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Check installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; to execute remote &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; command.&lt;/li&gt;
  &lt;li&gt;Check installation of the&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc&lt;/code&gt; CLI if Eclipse Che is running on OpenShift.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These tools will need to be on your local machine if they’re not already.&lt;/p&gt;

&lt;h3 id=&quot;2-in-eclipse-che-workspace&quot;&gt;2. In Eclipse Che Workspace&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; tool needs to be part of the workspace.&lt;/p&gt;

&lt;p&gt;Note: with OpenShift we could use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc rsync&lt;/code&gt; command. But there is no exclude filter taken into account, for example. So in this blog post I will use only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your Eclipse Che workspaces may include several running containers. (Workspace pod). Let’s add a new container that will manage only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; operations.&lt;/p&gt;

&lt;p&gt;I will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; tool included in the image &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quay.io/fbenoit/rsync-simple&lt;/code&gt; so no need to build it.&lt;/p&gt;

&lt;p&gt;The image includes the following:&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; alpine:latest  &lt;/span&gt;
...  
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt; rsync  
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see this just adds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; tool inside the smallest container possible (based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpine&lt;/code&gt; linux).&lt;/p&gt;

&lt;p&gt;I’ve also added an entry-point to keep the container always-on, and an extra permissions to make it compliant with the random user-id generated by OpenShift.&lt;/p&gt;

&lt;h3 id=&quot;workflow&quot;&gt;Workflow&lt;/h3&gt;

&lt;h3 id=&quot;1-updating-your-eclipse-che-workspace-to-allowrsync&quot;&gt;1. Updating your Eclipse Che workspace to allow rsync&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile&lt;/code&gt; is responsible of the definition of the Eclipse Che workspace.&lt;/p&gt;

&lt;p&gt;Edit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile&lt;/code&gt; of the workspace from the Eclipse Che dashboard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*S4LpqN66DslDBspmSlejwQ.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As seen in prerequisites, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; tool needs to be part of the workspace and by default it’s not there. Let’s add a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; component and let it have access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/projects&lt;/code&gt; folder using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mountSources: true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add this component into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;components&lt;/code&gt; section (or create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;components&lt;/code&gt; section first if it’s not there).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/e27a11502d0b7215beb77b922fae8c52.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now restart the workspace to finish the inclusion of this new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; component. You can check if you’ve been successful by opening the workspace in an IDE and opening the Workspace panel (the cube icon on the right of the IDE):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*GTpgDTQKdz5EIaKhFb4qAA.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-importing-files-into-your-local-computerlaptop&quot;&gt;3. Importing files into your local computer/laptop&lt;/h3&gt;

&lt;p&gt;To share files on our laptop and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt;, we will need some information.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; ready-to-use (authentication performed)&lt;/li&gt;
  &lt;li&gt;The name of the running remote workspace pod&lt;/li&gt;
  &lt;li&gt;An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; bash script&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;31-kubectl&quot;&gt;3.1. kubectl&lt;/h3&gt;

&lt;p&gt;In my example, I am using the online Eclipse Che instance hosted on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;che.openshift.io.&lt;/code&gt; I will copy the command to be able to log into OpenShift instance.&lt;/p&gt;

&lt;p&gt;I can use the OpenShift web console to do that. To get the web console link, open a terminal inside the IDE by using the Workspace panel within the IDE.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*MhsYrMqF5OTUPDqI.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open a terminal inside the Theia IDE container for example. Then type:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;\_OSO\_CLUSTER//api/console&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will display the URL of the console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*i0COfDvwSTNLulHk.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use command+click on &lt;a href=&quot;https://console.starter-us-east-2.openshift.com/&quot;&gt;https://console.starter-us-east-2.openshift.com/&lt;/a&gt;&lt;br /&gt;
It will open link in default browser. Note that your workspace might be assigned to a different cluster, so the URL might be different as well.&lt;/p&gt;

&lt;p&gt;When logged in in the OpenShift console:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the top right corner link&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy Login command&lt;/code&gt; and execute that command on your laptop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*cW62ijAisPJtRFrD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc&lt;/code&gt; login command and execute it on your laptop:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;oc login https://api.starter-us-east-2.openshift.com — &lt;span class=&quot;nv&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tHeEnCoDeDtOkEn  
Logged into &lt;span class=&quot;s2&quot;&gt;&quot;https://api.starter-us-east-2.openshift.com:443&quot;&lt;/span&gt; using the token provided.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then use your namespace (ending with -che) using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc project &amp;lt;namespace&amp;gt;&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;oc project &amp;lt;namespace&amp;gt;-che
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And we can check that the workspace pod is there by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc get pods&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get pods&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*H1wbQjKPG9855lJK.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;32-name-of-the-workspace-pod&quot;&gt;3.2. Name of the workspace pod&lt;/h3&gt;

&lt;p&gt;We will copy files from the remote workspace to our local machine.&lt;/p&gt;

&lt;p&gt;We need the name of the workspace. It is available from a terminal with the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOSTNAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*FNc5U92npf5UhCs8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another way is to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc&lt;/code&gt; tool to find the workspace pod name (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ kubectl get pods&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ oc get pods&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The name of the container that includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; is “rsync” as it’s the alias name we defined in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;33-the-rsyncscript&quot;&gt;3.3. The rsync script&lt;/h3&gt;

&lt;p&gt;To import the project files into Eclipse Che workspace, we will now use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will need a shell script to perform the copy and this script will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl exec&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl-rsync.sh&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/0189f4399beb9fc72392e5cbd9655add.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Don’t forget to make it executable: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod u+x kubectl-rsync.sh&lt;/code&gt; and now let’s assume you copy it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}/bin&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Now, let’s create another script named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace-sync.sh&lt;/code&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/abb5b1d13105eab0d8a357ee75cbaacc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Apply permissions by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod u+x workspace-sync.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Copy it, for example, to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}/bin&lt;/code&gt; folder. We’re using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; option in rsync parameters to specify another shell.&lt;/p&gt;

&lt;p&gt;Now that our scripts have been setup, it’s time to use them.&lt;/p&gt;

&lt;p&gt;First, we store the workspace pod into an env variable:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE_POD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;workspacelmog4zkmikhxpc87.workspace-74d787cf95-xbd26
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s proceed to the first import.&lt;/p&gt;

&lt;p&gt;Assuming our remote workspace has files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/projects/&lt;/code&gt; and that we want to copy workspace files it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}/my-workspace&lt;/code&gt; on our laptop, execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ RSYNC_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--progress --stats&quot;&lt;/span&gt; RSYNC&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE_POD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/projects/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RSYNC_TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/my-workspace&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin/workspace-sync.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now files are being transferred into our laptop.&lt;/p&gt;

&lt;p&gt;We see progress due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--progress&lt;/code&gt; option. You may add&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--exclude ‘node_modules'&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSYNC_OPTIONS&lt;/code&gt; for nodejs projects to exclude unwanted files.&lt;/p&gt;

&lt;p&gt;In your laptop you should see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my-project&lt;/code&gt; folder in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ts2FYhqX1f_MI4umWvhPiw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-editwork-with-your-project-on-yourlaptop&quot;&gt;4. Edit/work with your project on your laptop&lt;/h3&gt;

&lt;p&gt;Well here, you can do whatever you like with your project that has been synchronized to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}/my-workspace/my-project&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example if it’s a java/maven project you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mvn&lt;/code&gt; command there or run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn&lt;/code&gt; for nodejs project, etc.&lt;/p&gt;

&lt;h3 id=&quot;5-synchronize-back-all-thechanges&quot;&gt;5. Synchronize back all the changes&lt;/h3&gt;

&lt;p&gt;All modified files are now on your local computer so you can edit them. But at some point you’ll want those changes back in the remote Che workspace.&lt;/p&gt;

&lt;p&gt;We’ll use the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace-sync.sh&lt;/code&gt; script but we’ll reverse the source and destination. Because now we want to copy laptop’s changes to the remote workspace and not the previous way. Also, we’ll set this time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSYNC_INFINITE=true&lt;/code&gt; to do rsync every 15s (to never miss local changes).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ RSYNC_FROM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;my-workspace&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RSYNC_TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE_POD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/projects/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RSYNC_INFINITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin/workspace-sync.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can drop &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--progress --stats&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSYNC_OPTIONS&lt;/code&gt; so you don’t generate too much output now that you’ve confirmed it works.&lt;/p&gt;

&lt;p&gt;One issue is that when syncing back the changes, we don’t want to upload the whole node_modules folder. Adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--exclude node_modules&lt;/code&gt; parameter takes care of that.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;RSYNC_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--exclude node&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;modules&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script now checks all the changes every 15 seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*pvDlDYPzSFvS1GJoiWpkiA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All changes from my filesystem are now inside my remote workspace.&lt;/p&gt;

&lt;p&gt;Let’s check:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*HaCqORV_sD3gozrIE847oQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-finishing&quot;&gt;6. Finishing&lt;/h3&gt;

&lt;p&gt;When we’re done working we can double-check that the rsync script has finished to copy all files remotely and then delete the project on our laptop.&lt;/p&gt;

&lt;p&gt;One you have this all set up it’s easy to either leave it running all the time and fluidly move from editing on your laptop and editing in the cloud. Or only turn it on when you know you’ll be offline for awhile (like for a trip).&lt;/p&gt;</content><author><name>Florent Benoit</name></author><summary type="html">Eclipse Che has many thousands of users. Most of them use the VS Code-inspired browser IDE, but sometimes you know you’re going to be offline for awhile and want to be able to work with a local editor, then sync back your changes when you’re back online.</summary></entry><entry><title type="html">Import a project from your laptop to an Eclipse Che workspace.</title><link href="https://che.eclipseprojects.io/2020/04/02/@florent.benoit-work-on-my-laptops-project-from-a-remote-eclipse-che-workspace.html" rel="alternate" type="text/html" title="Import a project from your laptop to an Eclipse Che workspace." /><published>2020-04-02T00:00:00+00:00</published><updated>2020-04-02T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2020/04/02/@florent.benoit/work-on-my-laptops-project-from-a-remote-eclipse-che-workspace</id><content type="html" xml:base="https://che.eclipseprojects.io/2020/04/02/@florent.benoit-work-on-my-laptops-project-from-a-remote-eclipse-che-workspace.html">&lt;p&gt;Eclipse Che is a Kubernetes-Native IDE. It might be interesting to work on your project using remote resources instead of consuming your laptop resources. Another interesting way is to use containers that might be used in production as well.&lt;/p&gt;

&lt;p&gt;Also let say you’re running out of battery, you may spare CPU and get extra time !&lt;/p&gt;

&lt;p&gt;In this article we’ll cover how to set this up, by:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Defining an Eclipse Che workspace for a project (create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devfile&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Starting an Eclipse Che workspace ready to receive the project.&lt;/li&gt;
  &lt;li&gt;Pushing / importing the local files into the remote Eclipse Che workspace.&lt;/li&gt;
  &lt;li&gt;Coding using Eclipse Che.&lt;/li&gt;
  &lt;li&gt;Synchronizing all code changes with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Stopping the Che workspace and even deleting it without impacting the local copy.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;h4 id=&quot;1-on-my-laptop-check-all-tools-are-available&quot;&gt;1. On my laptop: check all tools are available&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Check local installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; on the laptop by trying to execute the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ rsync&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Check installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; to execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; command.&lt;/li&gt;
  &lt;li&gt;Check installation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc&lt;/code&gt; if Eclipse Che is running on top of OpenShift.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If these tools are not installed, please install them.&lt;/p&gt;

&lt;h4 id=&quot;2-in-eclipse-che-workspace&quot;&gt;2. In Eclipse Che Workspace&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt;tool needs to be part of the workspace.&lt;/p&gt;

&lt;p&gt;Note: with OpenShift we could use&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc rsync&lt;/code&gt; command. But there is no exclude filter taken into account for example. So in this blog post I will use only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt;tools&lt;/p&gt;

&lt;p&gt;Eclipse Che workspaces may include several running containers. (Workspace pod). Let’s add a new container that will manage only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; operations.&lt;/p&gt;

&lt;p&gt;For the demo, I will create a custom OCI image based on alpine. In this custom image, I will install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync tool.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I’ve published this image under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quay.io/fbenoit/rsync-simple&lt;/code&gt; so no need to build it.&lt;/p&gt;

&lt;p&gt;The image includes the following:&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; alpine:latest  &lt;/span&gt;
...  
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apk add &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt; rsync  
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see this just adds the&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; tool inside the smallest container possible (based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alpine&lt;/code&gt; linux).&lt;/p&gt;

&lt;p&gt;I’ve also added an entry-point to keep the container always-on. I added extra permissions to make it compliant with random user-id for OpenShift.&lt;/p&gt;

&lt;h4 id=&quot;3-a-localproject&quot;&gt;3. A local project&lt;/h4&gt;

&lt;p&gt;To make sure that everyone can reproduce the test, it’s important to use the same local project :-)&lt;/p&gt;

&lt;p&gt;The project I’m using is a clone of &lt;a href=&quot;https://github.com/che-samples/react-web-app&quot;&gt;https://github.com/che-samples/react-web-app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve cloned it into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME/react-web-app&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;The application is a Nodejs example.&lt;/p&gt;

&lt;h3 id=&quot;workflow&quot;&gt;Workflow&lt;/h3&gt;

&lt;h4 id=&quot;1-define-an-eclipse-che-workspace-for-my-project-create-adevfile&quot;&gt;1. Define an Eclipse Che workspace for my project (create a devfile)&lt;/h4&gt;

&lt;p&gt;Let’s start with a minimalist devfile. The devfile is responsible of creating the Eclipse Che workspace.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/c910348251322bb1155bea7cfed7057f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;persistVolumes&lt;/code&gt; to false as the storage will be our laptop. I don’t want to use remote storage to save my project files.&lt;/p&gt;

&lt;p&gt;As seen in prerequisites, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt;tool needs to be part of the workspace. Let’s add a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; component and let it have access to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/projects&lt;/code&gt; folder using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mountSources: true&lt;/code&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/73748447b14f499e49180ff61baa6678.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The workspace now includes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;Let’s add new components to work on the project with Eclipse Che.&lt;/p&gt;

&lt;p&gt;The project that I want to import is a Nodejs project.&lt;/p&gt;

&lt;p&gt;Now I add :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Intellisense with a typescript plugin&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nodejs&lt;/code&gt; component to have node tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/90499b50bf081ef4eb43a5cb3bb39290.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;2-start-an-eclipse-che-workspace-ready-to-receive-myproject&quot;&gt;2. Start an Eclipse Che workspace ready to receive my project&lt;/h4&gt;

&lt;p&gt;The workspace definition is ready with the devfile.&lt;/p&gt;

&lt;p&gt;There are a few ways we can start the Che workspace:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Importing this devfile into the Eclipse Che dashboard&lt;/li&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chectl&lt;/code&gt; with the devfile&lt;/li&gt;
  &lt;li&gt;Opening this &lt;a href=&quot;http://che.openshift.io/f/?url=https://gist.githubusercontent.com/benoitf/90499b50bf081ef4eb43a5cb3bb39290/raw/6b5fcb5fa9abf28693dc74ac20cb8d6c01cc4345/devfile.yaml&quot;&gt;direct link&lt;/a&gt; that creates and starts the workspace&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*LsTwkOIAEZ1N_R4xcOB2zg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the startup of the workspace, we can see the IDE. We can see that there are no files in project tree. This is normal because we want to import our local project folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*aQdSPCSpzoy8GWf2r4LlKQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-pushimport-into-the-remote-eclipse-che-workspace-the-localfiles&quot;&gt;3. Push/Import into the remote Eclipse Che workspace the local files&lt;/h4&gt;

&lt;p&gt;To push files to the remote workspace and use rsync, we will need some information.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; ready-to-use (authentication performed)&lt;/li&gt;
  &lt;li&gt;The name of the workspace pod&lt;/li&gt;
  &lt;li&gt;A rsync bash script&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;31-kubectl&quot;&gt;3.1. kubectl&lt;/h4&gt;

&lt;p&gt;In my example, I am using the online Eclipse Che instance hosted on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;che.openshift.io.&lt;/code&gt; I will copy the command to be able to log into OpenShift instance.&lt;/p&gt;

&lt;p&gt;I can use the OpenShift web console to do that. To get the web console link, open a terminal inside the IDE by using the Workspace panel within the IDE&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*8tRQjynD-Vz105I7QAEMMg.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CHE_OSO_CLUSTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//api/console&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It will display the URL of the console&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*t40cl9LnEzFjKK308q6CdQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Use command+click on &lt;a href=&quot;https://console.starter-us-east-2.openshift.com/&quot;&gt;https://console.starter-us-east-2.openshift.com/&lt;/a&gt;&lt;br /&gt;
It will open link in default browser.&lt;br /&gt;
Note: your cluster might be different so the URL might be different as well.&lt;/p&gt;

&lt;p&gt;When logged in in the OpenShift console:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the top right corner link&lt;/li&gt;
  &lt;li&gt;Click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy Login command&lt;/code&gt; and execute that command on your laptop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*74zeKYsoqUWIr6hIMx3keQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You should be now connected from your laptop to the OpenShift cluster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*hejFl6A3OUzstkjPNjZDUg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;32-name-of-the-workspace-pod&quot;&gt;3.2. Name of the workspace pod&lt;/h4&gt;

&lt;p&gt;We will copy files from the remote workspace.&lt;/p&gt;

&lt;p&gt;We need the name of the workspace. It is available from a terminal with the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOSTNAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*e94TBeKu3SR2HLmA5AXrRg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another way is to use&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc&lt;/code&gt;tool to find the workspace pod name (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ kubectl get pods&lt;/code&gt;or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ oc get pods&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Name of the container that includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync&lt;/code&gt; is rsync as it’s the alias name we defined in the devfile.&lt;/p&gt;

&lt;h4 id=&quot;33-the-rsyncscript&quot;&gt;3.3. The rsync script&lt;/h4&gt;

&lt;p&gt;To import the project files into Eclipse Che workspace, we will now use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsync.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will need a shell script to perform the copy and this script will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl exec&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Create a new file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl-rsync.sh&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/0189f4399beb9fc72392e5cbd9655add.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;And make it executable: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod u+x kubectl-rsync.sh&lt;/code&gt; and now let’s assume you copy it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}/bin&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Now, let’s create another script named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace-sync.sh&lt;/code&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/abb5b1d13105eab0d8a357ee75cbaacc.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Apply permissions by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod u+x workspace-sync.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Copy it for example to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}/bin&lt;/code&gt; folder. We’re using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-e&lt;/code&gt; option in rsync parameters to specify another shell.&lt;/p&gt;

&lt;p&gt;Now that our scripts have been setup, it’s time to use them.&lt;/p&gt;

&lt;p&gt;First, we store the workspace pod into an env variable:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE_POD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;workspacelmog4zkmikhxpc87.workspace-74d787cf95-xbd26
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s proceed to the first import.&lt;/p&gt;

&lt;p&gt;Assuming our local Nodejs app is in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${HOME}/react-web-app&lt;/code&gt;, execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ RSYNC_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--progress --stats --exclude 'node&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\_&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;modules'&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RSYNC_FROM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/react-web-app&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RSYNC_TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE_POD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/projects/&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin/workspace-sync.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Files are being transferred into the remote workspace.&lt;/p&gt;

&lt;p&gt;We see progress due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--progress&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;In the UI now we see &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;react-web-app&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*0ILdTv5LWAp_oHzVmIrO1A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;4-code-using-eclipseche&quot;&gt;4. Code using Eclipse Che&lt;/h4&gt;

&lt;p&gt;Let’s use yarn command to launch the project inside Eclipse Che.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*stAPWxgcnhcvPkSgqTto4g.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And now start the webapp using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn start&lt;/code&gt; command inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/projects/react-web-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*1MlP-Ejs6JS8fBniZZUMHw.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/App.tsx&lt;/code&gt; file and see the result.&lt;/p&gt;

&lt;h4 id=&quot;5-synchronize-back-all-thechanges&quot;&gt;5. Synchronize back all the changes&lt;/h4&gt;

&lt;p&gt;All modified files are in my Eclipse Che workspace. But I want to keep my local folder on my laptop in sync with my new remote changes.&lt;/p&gt;

&lt;p&gt;We’ll use the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workspace-sync.sh&lt;/code&gt; script but we’ll reverse the source and destination. Because now we want to copy remote changes to the laptop and not the previous way. Also, we’ll set this time &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSYNC_INFINITE=true&lt;/code&gt; to do rsync every 15s (to never miss remote changes).&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ RSYNC_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--exclude node_modules&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RSYNC_FROM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORKSPACE_POD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/projects/react-web-app/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RSYNC_TO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/react-web-app/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RSYNC_INFINITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin/workspace-sync.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I dropped &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--progress --stats&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RSYNC_OPTIONS&lt;/code&gt; to not generate too much output.&lt;/p&gt;

&lt;p&gt;One issue is that when syncing back the changes, we don’t want to download the whole node_modules folder. Adding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--exclude node_modules&lt;/code&gt; parameter takes care of that.&lt;/p&gt;

&lt;p&gt;The script now checks all the changes every 15 seconds.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*f8fhfbCvpuX2FX7RRDF-9A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All changes from Eclipse Che workspace are now inside my filesystem.&lt;/p&gt;

&lt;p&gt;Let’s check:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*ukJ137UX5FqrEehw3jd-7g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;6-finishing&quot;&gt;6. Finishing&lt;/h4&gt;

&lt;p&gt;When we’re done working we can double-check that the rsync script has finished to copy all files to my laptop, then stop the Eclipse Che workspace. We can even delete the stopped Che workspace as we have all the up-to-date changes saved on our local drive.&lt;/p&gt;

&lt;p&gt;Note: With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;persistVolumes=false&lt;/code&gt; , restarting the workspace will result in an empty project tree again until you re-run the laptop-to-remote-Che sync script.&lt;/p&gt;</content><author><name>Florent Benoit</name></author><summary type="html">Eclipse Che is a Kubernetes-Native IDE. It might be interesting to work on your project using remote resources instead of consuming your laptop resources. Another interesting way is to use containers that might be used in production as well.</summary></entry><entry><title type="html">Discover Che 7: devfile</title><link href="https://che.eclipseprojects.io/2019/10/02/@florent.benoit-discover-che-7-devfile.html" rel="alternate" type="text/html" title="Discover Che 7: devfile" /><published>2019-10-02T00:00:00+00:00</published><updated>2019-10-02T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2019/10/02/@florent.benoit/discover-che-7-devfile</id><content type="html" xml:base="https://che.eclipseprojects.io/2019/10/02/@florent.benoit-discover-che-7-devfile.html">&lt;p&gt;&lt;a href=&quot;https://che.eclipse.org/discover-eclipse-che-7-7515e74a99ca&quot;&gt;In a previous blog post&lt;/a&gt;, we’ve experimented ready-to-use workspaces and how to write/run/debug code easily.&lt;/p&gt;

&lt;p&gt;But when we are open a ready-to-use workspace, it seems that there is some magic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The runtime already has language tooling&lt;/li&gt;
  &lt;li&gt;There is code completion with pre-installed plug-ins for the given language&lt;/li&gt;
  &lt;li&gt;The project is already cloned into the workspace, and we have commands to build, debug and manipulate the runtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this blog post, we’ll discover what drives this workspace magic: the devfile.&lt;/p&gt;

&lt;h4 id=&quot;definition&quot;&gt;Definition&lt;/h4&gt;

&lt;p&gt;A devfile defines the configuration of the workspace, which is the developer’s environment. This definition is portable - we can create any number of identical workspaces from the same devfile. Anyone can share a devfile and everyone using this devfile will get the same workspace including projects, tooling, commands, etc…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*o_SxIc5VuMqc0BtS.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;explore&quot;&gt;Explore&lt;/h4&gt;

&lt;p&gt;To make exploration easier, we’ll use the hosted Eclipse Che service (version 7) run by Red Hat at &lt;a href=&quot;https://che.openshift.io&quot;&gt;https://che.openshift.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For our example, let’s start with a pre-built workspace Stack: From the user dashboard, click on Stacks in the left nav bar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*edyrQNdKqzpJC9jhh3MQLA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now click on Python stack:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*8rOhOHjaU4cdimuJXeGjlA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The raw configuration section shows the devfile content:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*rYww8WAOL7YbRjhNzFwWxQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/benoitf/660dbe69a2098cbc9653829a38d33bcb.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;deconstructing-thedevfile&quot;&gt;Deconstructing the devfile&lt;/h3&gt;

&lt;h4 id=&quot;metadata&quot;&gt;Metadata&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;metadata.generateName&lt;/code&gt; is used for the workspace prefix name. When a user creates a workspace from the devfile, their workspace name will be named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-&amp;lt;random-4-digits-id&amp;gt;&lt;/code&gt;. By using instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generateName metadata.name&lt;/code&gt; there will be no prefix so workspace names will all use only that name, however, if a single user tries to create a second workspace from the same devile, they’ll get an error notifying them that they can’t create another workspace because one with that name already exists.&lt;/p&gt;

&lt;h4 id=&quot;projects&quot;&gt;Projects&lt;/h4&gt;

&lt;p&gt;Describes the projects to clone into the workspace. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; field can be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt;. In this case, we’re using git so we specify the repository URL (there can be multiple URLs to clone in multiple projects).&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;projects&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python-hello-world&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
   &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;git&lt;/span&gt;  
   &lt;span class=&quot;na&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[https://github.com/che-samples/python-hello-world.git'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(https://github.com/che-samples/python-hello-world.git%27)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; type you can link to a zip file containing the project source code.&lt;/p&gt;

&lt;h4 id=&quot;components&quot;&gt;Components&lt;/h4&gt;

&lt;p&gt;This example devfile uses two kind of components: a Che plug-in and a docker image.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chePlugin&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ms-python/python/latest&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;memoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;512Mi&lt;/span&gt;  
 &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dockerimage&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;quay.io/eclipse/che-python-3.6:nightly'&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;memoryLimit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;512Mi&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;mountSources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cheplugin&lt;/code&gt; type is used for plugins in the Eclipse Che plug-in registry. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; field includes the vendor name, name and version divided by slashes. In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;latest&lt;/code&gt; is an alias to the latest stable definition of the plug-in. This Che Plug-in is a VS Code extension that is instantiated in a sidecar container with its own code and dependencies. This is held outside the source code container so that it doesn’t “pollute” the behaviour of the project itself.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dockerimage&lt;/code&gt; type is used to generate the runtime container. In this case that includes everything in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;che-python-3.6&lt;/code&gt; nightly container build. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias&lt;/code&gt; is what will be used to identify this container when we want commands executed in it (we’ll cover that in the next section). Setting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mountSources&lt;/code&gt; flag to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; will make the projects source code available inside this container. Typically in the&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/projects&lt;/code&gt; folder. If you make it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; then there will be no folder that uses attached storage (this is fine for certain use cases like teaching examples where code changes don’t need to be retained after the course unit is completed).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memoryLimit&lt;/code&gt; can be given in either case to change the default memory allocation.&lt;/p&gt;

&lt;h4 id=&quot;commands&quot;&gt;Commands&lt;/h4&gt;

&lt;p&gt;Commands defined in the devfile will be available in the IDE.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;run&lt;/span&gt;  
  &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  
   &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;exec&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;python hello-world.py&lt;/span&gt;  
    &lt;span class=&quot;na&quot;&gt;workdir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;${CHE_PROJECTS_ROOT}/python-hello-world'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt; command is defined. It is executing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello-world.py&lt;/code&gt; source file with the python interpreter. The working directory is set with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workdir&lt;/code&gt; line.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;component: python&lt;/code&gt; line tells Che to execute this command in the container with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; alias (we defined that in the section above).&lt;/p&gt;

&lt;p&gt;Variables can be used in commands like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${CHE_PROJECTS_ROOT}&lt;/code&gt; to specify the folder where the source code is mounted in the container.&lt;/p&gt;

&lt;h4 id=&quot;experiment-with-devfiles-foryourself&quot;&gt;Experiment with devfiles for yourself&lt;/h4&gt;

&lt;p&gt;You can click on different stacks from the Che user dashboard and see the associated devfile — this is a great way to discover more examples.&lt;/p&gt;

&lt;p&gt;Read about the full devfile schema at &lt;a href=&quot;https://redhat-developer.github.io/devfile/devfile&quot;&gt;https://redhat-developer.github.io/devfile/devfile&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;get-involved&quot;&gt;Get Involved!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/che/docs/#getting-started&quot;&gt;Quick Start with Eclipse Che&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join the community:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: You can ask questions, report bugs, and request features using &lt;a href=&quot;https://github.com/eclipse/che/issues&quot;&gt;GitHub issues&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Public Chat&lt;/strong&gt;: Join the public &lt;a href=&quot;https://mattermost.eclipse.org/eclipse/channels/eclipse-che&quot;&gt;eclipse-che&lt;/a&gt; Mattermost channel to discuss with community and contributors.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Weekly Meetings&lt;/strong&gt;: Join us in our &lt;a href=&quot;https://github.com/eclipse/che/wiki/Che-Dev-Meetings&quot;&gt;Che community meeting&lt;/a&gt; every second monday.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mailing list&lt;/strong&gt;: che-dev@eclipse.org&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Florent Benoit</name></author><summary type="html">In a previous blog post, we’ve experimented ready-to-use workspaces and how to write/run/debug code easily.</summary></entry><entry><title type="html">Discover Eclipse Che 7</title><link href="https://che.eclipseprojects.io/2019/09/26/@florent.benoit-discover-eclipse-che-7.html" rel="alternate" type="text/html" title="Discover Eclipse Che 7" /><published>2019-09-26T00:00:00+00:00</published><updated>2019-09-26T00:00:00+00:00</updated><id>https://che.eclipseprojects.io/2019/09/26/@florent.benoit/discover-eclipse-che-7</id><content type="html" xml:base="https://che.eclipseprojects.io/2019/09/26/@florent.benoit-discover-eclipse-che-7.html">&lt;p&gt;Eclipse Che 7 has been announced few days ago, if you have not yet tried it, it’s time to experiment with all the new exciting capabilities!&lt;/p&gt;

&lt;p&gt;This guide will drive you through different steps and allow you to experiment Che 7. To follow this guide, you’ll not need to install Che on your machine or your K8S cluster, we’ll just be using a free online instance of Eclipse Che that is running at &lt;a href=&quot;https://che.openshift.io&quot;&gt;https://che.openshift.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s a free-to-use instance that is powered by latest Eclipse Che 7 version and providing 3GB of memory for a single workspace. It requires a Red Hat Developer account but you can log-in with different third parties accounts like github, facebook, google, twitter, etc.&lt;/p&gt;

&lt;h3 id=&quot;pre-requisities&quot;&gt;Pre-requisities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://che.openshift.io&quot;&gt;https://che.openshift.io&lt;/a&gt; and log-in or create an account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*zP2mhFXfO1JpH6LWA3ElYQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After creating a new account or simply log-in, you’re redirected to the dashboard page of Eclipse Che&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*K5GPheEfQ0cBPlt2f8ZcDA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;discovering-che-workspaces&quot;&gt;Discovering Che Workspaces&lt;/h3&gt;

&lt;p&gt;Eclipse Che is using containers under the hood. It means all runtimes used in workspaces can be customized by some docker images: for example java runtime, nodejs runtime, etc. are provided on top of docker images.&lt;/p&gt;

&lt;p&gt;But as it may be difficult to start by writing or providing first a Docker image, there are default ready-to-use workspace templates.&lt;/p&gt;

&lt;p&gt;These ready-to-use workspaces are provided on top of community Docker images and are great to start to work on a given technology.&lt;/p&gt;

&lt;h4 id=&quot;create-a-workspace&quot;&gt;Create a workspace&lt;/h4&gt;

&lt;p&gt;Let’s create a simple go application&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On the dashboard, click “Create Workspace”&lt;/li&gt;
  &lt;li&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select stack&lt;/code&gt; section, click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Check that in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projects&lt;/code&gt; section, example is selected&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*cO5DKBY8AK_SV3pkbyJR8Q.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After clicking on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create &amp;amp; open&lt;/code&gt; button we’re redirected to the IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ephemeral mode&lt;/code&gt; flag as we don’t care about persisting changes for demos and want the fastest I/O storage.&lt;/p&gt;

&lt;h3 id=&quot;discover-the-newide&quot;&gt;Discover the new IDE!&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*lLTYUqtjMbGwq74hW2bxRw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the IDE, there are several useful areas/panels.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*hojbuZ8bNivG9Z191fxI9w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clicking on the top left file icon will display all the files of the current workspace.&lt;/p&gt;

&lt;h4 id=&quot;command-palette&quot;&gt;Command palette&lt;/h4&gt;

&lt;p&gt;Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F1&lt;/code&gt; key or click on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command palette&lt;/code&gt; link in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Welcome Panel&lt;/code&gt;. Enter some keyword to filter out commands. Formatting can be done easily with a specific command invoked from command palette. Keyboard shortcuts are displayed on the right of the command. No need to bring command palette and select a command if you already know its shortcut.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*vV-Hbn81mE6uwmIOGMcNzA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;workspace-panel&quot;&gt;Workspace panel&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*YnWLY1ritG5ox-uB39vLGQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The workspace panel is a quick view allowing to interact with the workspace like launching pre-defined commands for this workspace or opening terminals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*RR_dBL6BgRdNEBf20HLNEQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are two kind of containers:&lt;br /&gt;
 — &lt;em&gt;Plugin’s runtime containers&lt;/em&gt;: containers provided by plug-ins. It’s the execution runtime used by these plugins&lt;/p&gt;

&lt;p&gt;— &lt;em&gt;User runtime container&lt;/em&gt;: We may not have it at all or more than one. It’s used to run some commands you would like. All these commands can be found by using the command palette and using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run Task&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By clicking on a command name (single click, no double-click), like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run outyet&lt;/code&gt; it will invoke this command in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-cli&lt;/code&gt; container. You may open a terminal as well from this view by clicking on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New terminal&lt;/code&gt; link. Terminals can be opened on any containers.&lt;/p&gt;

&lt;h4 id=&quot;status-bar&quot;&gt;Status bar&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*3oqbKbfKGs1fJ6DypUYfjg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Blue bar means that IDE is remotely connected to the workspace server. In case of connection failures, the bar will turn into orange and there is a text saying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offline&lt;/code&gt;. Information like git information or&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ephemeral mode&lt;/code&gt; are also displayed.&lt;/p&gt;

&lt;h3 id=&quot;language-tooling&quot;&gt;Language tooling&lt;/h3&gt;

&lt;p&gt;Ready-to-go workspaces are already providing the tooling for the selected language so no need to install plug-ins after in order to work on a project.&lt;/p&gt;

&lt;p&gt;From the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;view/Plugins&lt;/code&gt; panel we can see that we already have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go&lt;/code&gt; plug-in installed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*XBcHoTOTvi693F3UqVCx9w.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*kCMiGIFWI-ZmDUM6kJwvLQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;by opening file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/github.com/golang/example/outyet/main.go&lt;/code&gt; there is already syntax highlighting in the go file.&lt;/p&gt;

&lt;p&gt;Debugging is also easy. Just create a new launch configuration for go.&lt;/p&gt;

&lt;h4 id=&quot;debugging-the-application&quot;&gt;Debugging the application&lt;/h4&gt;

&lt;p&gt;After opening the debugger panel by going into the menu: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View --&amp;gt; Debug&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*zvqxk2R7Cfe9QopVGpiEHw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, in the Debugger panel, click on the dropdown of the configurations and click on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Configuration...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;note: it’s also possible to add configurations by clicking in menu&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Debug/Add Configuration...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using the code completion, select the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go: Launch file&lt;/code&gt; entry and let the default.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*i9er0ybeODHJTCRbVRJvEw.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, just hit some breakpoints in the code by clicking on the space before the line number&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*UyEyKnAxQ8m5B6Kgh2OA4A.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And launch the debug configuration (default name will &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Launch File&lt;/code&gt; )&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*_id4uipZuON1XSJVA08vCg.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All options like step-in, step-out, resume, etc. are available in the debugger.&lt;/p&gt;

&lt;p&gt;Inline operations are also available in the editor when you edit test files.&lt;/p&gt;

&lt;p&gt;Opening file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/github.com/golang/example/outyet/main_test.go&lt;/code&gt; file and then going on test functions will display run/debug options.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*p_H8IYlp74poxhyyLSg3xQ.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, you’re ready to experiment Eclipse Che on your own!&lt;/p&gt;

&lt;h3 id=&quot;get-involved&quot;&gt;Get Involved!&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/che/docs/#getting-started&quot;&gt;Quick Start with Eclipse Che&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join the community:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Support&lt;/strong&gt;: You can ask questions, report bugs, and request features using &lt;a href=&quot;https://github.com/eclipse/che/issues&quot;&gt;GitHub issues&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Public Chat&lt;/strong&gt;: Join the public &lt;a href=&quot;https://mattermost.eclipse.org/eclipse/channels/eclipse-che&quot;&gt;eclipse-che&lt;/a&gt; Mattermost channel to discuss with community and contributors.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Weekly Meetings&lt;/strong&gt;: Join us in our &lt;a href=&quot;https://github.com/eclipse/che/wiki/Che-Dev-Meetings&quot;&gt;Che community meeting&lt;/a&gt; every second monday.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mailing list&lt;/strong&gt;: che-dev@eclipse.org&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Florent Benoit</name></author><summary type="html">Eclipse Che 7 has been announced few days ago, if you have not yet tried it, it’s time to experiment with all the new exciting capabilities!</summary></entry></feed>